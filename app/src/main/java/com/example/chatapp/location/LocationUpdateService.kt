package com.example.chatapp.location

import android.Manifest
import android.annotation.SuppressLint
import android.app.*
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Color
import android.location.Location
import android.location.LocationManager
import android.net.Uri
import android.os.*
import android.provider.Settings
import android.util.Log
import androidx.core.app.NotificationCompat
import androidx.core.content.ContextCompat
import com.example.chatapp.R
import com.example.chatapp.models.UserLocation
import com.google.android.gms.location.*
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.FirebaseDatabase
import kotlinx.coroutines.*
import kotlinx.coroutines.tasks.await
import java.util.concurrent.atomic.AtomicBoolean
import kotlin.coroutines.resume
import kotlin.coroutines.suspendCoroutine
import kotlin.math.abs
import kotlin.math.atan2
import kotlin.math.cos
import kotlin.math.pow
import kotlin.math.sin
import kotlin.math.sqrt

class LocationUpdateService : Service() {

    private lateinit var fusedLocationClient: FusedLocationProviderClient
    private lateinit var locationCallback: LocationCallback
    private lateinit var handler: Handler
    private lateinit var wakeLock: PowerManager.WakeLock

    private val database = FirebaseDatabase.getInstance().reference
    private val auth = FirebaseAuth.getInstance()

    private val isRunning = AtomicBoolean(false)
    private val isLocationUpdatesActive = AtomicBoolean(false)

    private var lastLocation: Location? = null
    private var currentColorIndex = 0
    private val routeColors = listOf(Color.BLUE, Color.RED, Color.GREEN, Color.MAGENTA, Color.CYAN)

    private val serviceScope = CoroutineScope(Dispatchers.IO + SupervisorJob())

    companion object {
        const val TAG = "LocationUpdateService"
        const val NOTIFICATION_CHANNEL_ID = "location_tracker_channel"
        const val NOTIFICATION_ID = 1
        const val ACTION_START = "START_LOCATION_TRACKING"
        const val ACTION_STOP = "STOP_LOCATION_TRACKING"

        // –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ GPS "–ø—Ä—ã–∂–∫–æ–≤"
        private const val LOCATION_UPDATE_INTERVAL = 15000L // 15 —Å–µ–∫—É–Ω–¥
        private const val FASTEST_UPDATE_INTERVAL = 10000L   // 10 —Å–µ–∫—É–Ω–¥
        private const val MIN_DISTANCE = 15f               // 15 –º–µ—Ç—Ä–æ–≤
        private const val MAX_ACCURACY = 50f               // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ –º–µ—Ç—Ä–∞—Ö
        private const val MAX_SPEED = 27.78f               // 100 –∫–º/—á –≤ –º/—Å

        fun startService(context: Context) {
            Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ª–æ–∫–∞—Ü–∏–∏")
            val intent = Intent(context, LocationUpdateService::class.java).apply {
                action = ACTION_START
            }
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                context.startForegroundService(intent)
            } else {
                context.startService(intent)
            }
        }

        fun stopService(context: Context) {
            Log.d(TAG, "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ª–æ–∫–∞—Ü–∏–∏")
            val intent = Intent(context, LocationUpdateService::class.java).apply {
                action = ACTION_STOP
            }
            context.startService(intent)
        }
    }

    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "üìç –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞")
        checkBatteryOptimization()
        acquireWakeLock()
        handler = Handler(Looper.getMainLooper())
        createNotificationChannel()
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
        createLocationCallback()
        Log.d(TAG, "‚úÖ –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(TAG, "üéØ –ö–æ–º–∞–Ω–¥–∞: ${intent?.action}")

        when (intent?.action) {
            ACTION_START -> {
                if (!isRunning.get()) {
                    Log.d(TAG, "üîÑ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
                    startForegroundService()
                } else {
                    Log.d(TAG, "‚úÖ –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
                    serviceScope.launch {
                        setupLocationUpdates()
                    }
                }
            }
            ACTION_STOP -> {
                Log.d(TAG, "üõë –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞")
                stopLocationTracking()
                stopSelf()
            }
            else -> {
                Log.w(TAG, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${intent?.action}")
            }
        }

        return START_STICKY
    }

    private fun checkBatteryOptimization() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            val powerManager = getSystemService(Context.POWER_SERVICE) as PowerManager
            val isIgnoringOptimizations = powerManager.isIgnoringBatteryOptimizations(packageName)

            Log.d(TAG, "üîã Battery optimization ignored: $isIgnoringOptimizations")

            if (!isIgnoringOptimizations) {
                Log.w(TAG, "‚ö†Ô∏è BATTERY OPTIMIZATION IS ENABLED - LOCATION MAY BE INTERRUPTED!")
                showBatteryOptimizationNotification()
            } else {
                Log.d(TAG, "‚úÖ Battery optimization is disabled - good!")
            }
        }
    }

    private fun acquireWakeLock() {
        try {
            val powerManager = getSystemService(Context.POWER_SERVICE) as PowerManager
            wakeLock = powerManager.newWakeLock(
                PowerManager.PARTIAL_WAKE_LOCK or
                        PowerManager.ACQUIRE_CAUSES_WAKEUP,
                "LocationTracker::WakeLock"
            )
            wakeLock.setReferenceCounted(true)
            wakeLock.acquire(10 * 60 * 1000L)
            Log.d(TAG, "üîã WakeLock –ø–æ–ª—É—á–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è WakeLock", e)
        }
    }

    private fun startForegroundService() {
        Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ foreground —Å–µ—Ä–≤–∏—Å–∞")
        try {
            isRunning.set(true)

            // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–∫–∏–Ω–≥–∞
            serviceScope.launch {
                updateTrackingStatus(true)
            }

            val notification = buildNotification()
            startForeground(NOTIFICATION_ID, notification)

            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            serviceScope.launch {
                Log.d(TAG, "üéØ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ä–≤–∏—Å–∞...")
                setupLocationUpdates()
                requestSingleLocation() // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏
            }

            Log.d(TAG, "‚úÖ Foreground —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞", e)
            stopLocationTracking()
        }
    }

    private fun buildNotification(): Notification {
        val launchIntent = packageManager.getLaunchIntentForPackage(packageName)
        val pendingIntent = PendingIntent.getActivity(
            this, 0, launchIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        return NotificationCompat.Builder(this, NOTIFICATION_CHANNEL_ID)
            .setContentTitle("üìç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞")
            .setContentText("–ê–∫—Ç–∏–≤–Ω–æ - –ø–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–∏...")
            .setSmallIcon(R.drawable.ic_location)
            .setPriority(NotificationCompat.PRIORITY_MAX)
            .setOngoing(true)
            .setCategory(Notification.CATEGORY_SERVICE)
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
            .setContentIntent(pendingIntent)
            .build()
    }

    @SuppressLint("MissingPermission")
    private fun setupLocationUpdates() {
        Log.d(TAG, "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ª–æ–∫–∞—Ü–∏–∏")

        if (!hasLocationPermissions()) {
            Log.e(TAG, "‚ùå –ù–ï–¢ –†–ê–ó–†–ï–®–ï–ù–ò–ô –ù–ê –õ–û–ö–ê–¶–ò–Æ!")
            showPermissionNotification()
            updateNotification("–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –ª–æ–∫–∞—Ü–∏—é")
            return
        }

        if (!isLocationEnabled()) {
            Log.e(TAG, "‚ùå –õ–æ–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            showLocationDisabledNotification()
            updateNotification("–õ–æ–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return
        }

        Log.d(TAG, "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –µ—Å—Ç—å, –ª–æ–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞")

        try {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π callback
            removeLocationUpdates()

            val locationRequest = LocationRequest.Builder(
                Priority.PRIORITY_HIGH_ACCURACY,
                LOCATION_UPDATE_INTERVAL
            )
                .setMinUpdateIntervalMillis(FASTEST_UPDATE_INTERVAL)
                .setMinUpdateDistanceMeters(MIN_DISTANCE)
                .setWaitForAccurateLocation(true)
                .setMaxUpdateDelayMillis(5000) // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                .build()

            Log.d(TAG, "üìç –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ª–æ–∫–∞—Ü–∏–∏: –∏–Ω—Ç–µ—Ä–≤–∞–ª $LOCATION_UPDATE_INTERVAL –º—Å")

            fusedLocationClient.requestLocationUpdates(
                locationRequest,
                locationCallback,
                Looper.getMainLooper()
            ).addOnSuccessListener {
                Log.d(TAG, "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ó–ê–ü–£–©–ï–ù–´")
                isLocationUpdatesActive.set(true)
                updateNotification("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
            }.addOnFailureListener { e ->
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ª–æ–∫–∞—Ü–∏–∏", e)
                updateNotification("–û—à–∏–±–∫–∞ –ª–æ–∫–∞—Ü–∏–∏")
                handleLocationError()
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏", e)
            updateNotification("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            handleLocationError()
        }
    }

    private fun createLocationCallback() {
        locationCallback = object : LocationCallback() {
            override fun onLocationResult(locationResult: LocationResult) {
                if (!isRunning.get()) {
                    Log.w(TAG, "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞—Ü–∏—é")
                    return
                }

                val location = locationResult.lastLocation
                if (location != null) {
                    Log.d(TAG, "üìç –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è: ${location.latitude}, ${location.longitude}, accuracy: ${location.accuracy}")

                    if (isValidLocation(location)) {
                        Log.d(TAG, "‚úÖ –õ–æ–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                        updateNotification("–õ–æ–∫–∞—Ü–∏—è: ${"%.6f".format(location.latitude)}, ${"%.6f".format(location.longitude)}")
                        serviceScope.launch {
                            processNewLocation(location)
                        }
                    } else {
                        Log.w(TAG, "‚ö†Ô∏è –õ–æ–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                        updateNotification("–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è")
                    }
                } else {
                    Log.w(TAG, "‚ö†Ô∏è –õ–æ–∫–∞—Ü–∏—è null –≤ callback")
                    updateNotification("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
                }
            }

            override fun onLocationAvailability(availability: LocationAvailability) {
                Log.d(TAG, "üì° –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞—Ü–∏–∏: ${availability.isLocationAvailable}")
                if (!availability.isLocationAvailable) {
                    Log.w(TAG, "‚ö†Ô∏è –õ–æ–∫–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    updateNotification("–õ–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

                    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    handler.postDelayed({
                        if (isRunning.get() && !availability.isLocationAvailable) {
                            Log.d(TAG, "üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏...")
                            serviceScope.launch {
                                setupLocationUpdates()
                            }
                        }
                    }, 2000)
                } else {
                    Log.d(TAG, "‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
                    updateNotification("–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–∏...")
                }
            }
        }
    }

    private fun isValidLocation(location: Location): Boolean {
        val currentTime = System.currentTimeMillis()

        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (location.latitude == 0.0 || location.longitude == 0.0 ||
            abs(location.latitude) > 90 || abs(location.longitude) > 180 ||
            location.time > currentTime + 60000 || // –ù–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ
            location.time < currentTime - 300000) { // –ù–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
            Log.w(TAG, "‚ö†Ô∏è –õ–æ–∫–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return false
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if (location.accuracy > MAX_ACCURACY) {
            Log.w(TAG, "‚ö†Ô∏è –õ–æ–∫–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å ${location.accuracy}")
            return false
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        if (location.hasSpeed() && location.speed > MAX_SPEED) {
            Log.w(TAG, "‚ö†Ô∏è –õ–æ–∫–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ ${location.speed * 3.6} –∫–º/—á")
            return false
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏
        lastLocation?.let { previous ->
            val distance = calculateDistance(
                previous.latitude, previous.longitude,
                location.latitude, location.longitude
            )
            val timeDiff = (location.time - previous.time) / 1000.0 // —Å–µ–∫—É–Ω–¥—ã

            if (timeDiff > 0) {
                val speed = distance / timeDiff // –º/—Å

                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å 100 –∫–º/—á (27.78 –º/—Å)
                if (speed > MAX_SPEED) {
                    Log.w(TAG, "‚ö†Ô∏è –õ–æ–∫–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: —Å–∫–æ—Ä–æ—Å—Ç—å –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ ${String.format("%.1f", speed * 3.6)} –∫–º/—á")
                    return false
                }

                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª (100 –∫–º/—á * 15 —Å–µ–∫ = 417 –º–µ—Ç—Ä–æ–≤)
                val maxPossibleDistance = MAX_SPEED * timeDiff
                if (distance > maxPossibleDistance) {
                    Log.w(TAG, "‚ö†Ô∏è –õ–æ–∫–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ $distance –º –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–µ $maxPossibleDistance –º")
                    return false
                }
            }
        }

        Log.d(TAG, "‚úÖ –õ–æ–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é: accuracy=${location.accuracy}")
        return true
    }

    private fun isRealisticMovement(newLocation: Location): Boolean {
        lastLocation?.let { previous ->
            val distance = calculateDistance(
                previous.latitude, previous.longitude,
                newLocation.latitude, newLocation.longitude
            )
            val timeDiff = (newLocation.time - previous.time) / 1000.0

            if (timeDiff <= 0) return true

            val speed = distance / timeDiff

            // –î–ª—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –∏ –ø–µ—à–∏—Ö –ø—Ä–æ–≥—É–ª–æ–∫ - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            val maxSpeed = when {
                distance < 50 -> 10.0  // 36 –∫–º/—á –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏–π
                distance < 200 -> 15.0 // 54 –∫–º/—á –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏–π
                else -> MAX_SPEED.toDouble() // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Float –≤ Double
            }

            if (speed > maxSpeed) {
                Log.w(TAG, "üö´ –ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ: ${String.format("%.1f", speed * 3.6)} –∫–º/—á")
                return false
            }
        }

        return true
    }

    private suspend fun processNewLocation(location: Location) {
        try {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å
            if (!isRealisticMovement(location)) {
                Log.w(TAG, "üìç –õ–æ–∫–∞—Ü–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è")
                return
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥)
            lastLocation?.let { oldLocation ->
                val distance = calculateDistance(
                    oldLocation.latitude, oldLocation.longitude,
                    location.latitude, location.longitude
                )
                if (distance > 200) { // –ë–æ–ª–µ–µ 200 –º–µ—Ç—Ä–æ–≤ - –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç (–±—ã–ª–æ 100)
                    currentColorIndex = (currentColorIndex + 1) % routeColors.size
                    Log.d(TAG, "üé® –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞: ${routeColors[currentColorIndex]}")
                }
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
            saveLocationToFirebase(location)

            lastLocation = location
            Log.d(TAG, "‚úÖ –õ–æ–∫–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏", e)
        }
    }

    private suspend fun saveLocationToFirebase(location: Location) {
        val userId = auth.currentUser?.uid
        if (userId == null) {
            Log.e(TAG, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return
        }

        val locationData = hashMapOf(
            "lat" to location.latitude,
            "lng" to location.longitude,
            "timestamp" to System.currentTimeMillis(),
            "accuracy" to location.accuracy,
            "color" to routeColors[currentColorIndex]
        )

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—á–∏—â–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            val historyKey = database.child("route_history").child(userId).push().key
            if (historyKey != null) {
                database.child("route_history")
                    .child(userId)
                    .child(historyKey)
                    .setValue(locationData)
                    .await()
                Log.d(TAG, "‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –∫–ª—é—á–æ–º $historyKey")
            }

            // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–º–æ–∂–Ω–æ –æ—á–∏—â–∞—Ç—å)
            val sessionKey = database.child("user_locations").child(userId).push().key
            if (sessionKey != null) {
                database.child("user_locations")
                    .child(userId)
                    .child(sessionKey)
                    .setValue(locationData)
                    .await()
                Log.d(TAG, "‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é —Å –∫–ª—é—á–æ–º $sessionKey")
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            database.child("last_locations")
                .child(userId)
                .setValue(locationData)
                .await()
            Log.d(TAG, "‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ª–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –≤ Firebase", e)
        }
    }

    @SuppressLint("MissingPermission")
    private suspend fun requestSingleLocation() {
        if (!hasLocationPermissions()) {
            Log.e(TAG, "‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            return
        }

        Log.d(TAG, "üéØ –ó–∞–ø—Ä–æ—Å –µ–¥–∏–Ω–∏—á–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏...")

        try {
            val location = withTimeoutOrNull(15000) {
                suspendCoroutine<Location?> { continuation ->
                    Log.d(TAG, "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏...")

                    val tempCallback = object : LocationCallback() {
                        override fun onLocationResult(locationResult: LocationResult) {
                            val loc = locationResult.lastLocation
                            Log.d(TAG, "üìç –ï–¥–∏–Ω–∏—á–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –≤ callback: ${loc?.latitude}, ${loc?.longitude}")
                            continuation.resume(loc)
                            fusedLocationClient.removeLocationUpdates(this)
                        }

                        override fun onLocationAvailability(availability: LocationAvailability) {
                            Log.d(TAG, "üì° –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –µ–¥–∏–Ω–∏—á–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏: ${availability.isLocationAvailable}")
                        }
                    }

                    val immediateRequest = LocationRequest.Builder(
                        Priority.PRIORITY_HIGH_ACCURACY,
                        5000
                    ).setMaxUpdates(1).build()

                    fusedLocationClient.requestLocationUpdates(
                        immediateRequest,
                        tempCallback,
                        Looper.getMainLooper()
                    ).addOnSuccessListener {
                        Log.d(TAG, "‚úÖ –ó–∞–ø—Ä–æ—Å –µ–¥–∏–Ω–∏—á–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    }.addOnFailureListener { e ->
                        Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –µ–¥–∏–Ω–∏—á–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏", e)
                        continuation.resume(null)
                    }

                    // –¢–∞–π–º–∞—É—Ç
                    handler.postDelayed({
                        if (continuation.context.isActive) {
                            Log.w(TAG, "‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –µ–¥–∏–Ω–∏—á–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏")
                            continuation.resume(null)
                            fusedLocationClient.removeLocationUpdates(tempCallback)
                        }
                    }, 15000)
                }
            }

            location?.let {
                Log.d(TAG, "üìç –ï–¥–∏–Ω–∏—á–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: ${it.latitude}, ${it.longitude}")
                processNewLocation(it)
            } ?: run {
                Log.w(TAG, "‚ö†Ô∏è –ï–¥–∏–Ω–∏—á–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ (—Ç–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞)")
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –µ–¥–∏–Ω–∏—á–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏", e)
        }
    }

    private fun stopLocationTracking() {
        Log.d(TAG, "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞")

        isRunning.set(false)
        isLocationUpdatesActive.set(false)

        removeLocationUpdates()

        serviceScope.launch {
            updateTrackingStatus(false)
        }

        releaseWakeLock()
        serviceScope.cancel()

        Log.d(TAG, "‚úÖ –¢—Ä–µ–∫–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }

    private fun removeLocationUpdates() {
        try {
            if (::locationCallback.isInitialized) {
                fusedLocationClient.removeLocationUpdates(locationCallback)
                Log.d(TAG, "‚úÖ Location updates removed")
            }
        } catch (e: Exception) {
            Log.d(TAG, "‚ö†Ô∏è Location updates already removed –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        }
    }

    private suspend fun updateTrackingStatus(isTracking: Boolean) {
        val userId = auth.currentUser?.uid ?: return
        try {
            database.child("tracking_status").child(userId).setValue(isTracking).await()
            Log.d(TAG, "‚úÖ –°—Ç–∞—Ç—É—Å —Ç—Ä–µ–∫–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: $isTracking")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞", e)
        }
    }

    private fun releaseWakeLock() {
        try {
            if (::wakeLock.isInitialized && wakeLock.isHeld) {
                wakeLock.release()
                Log.d(TAG, "üîã WakeLock –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è WakeLock", e)
        }
    }

    private fun hasLocationPermissions(): Boolean {
        val hasFineLocation = ContextCompat.checkSelfPermission(
            this,
            Manifest.permission.ACCESS_FINE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED

        val hasCoarseLocation = ContextCompat.checkSelfPermission(
            this,
            Manifest.permission.ACCESS_COARSE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED

        Log.d(TAG, "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: FINE=$hasFineLocation, COARSE=$hasCoarseLocation")

        return hasFineLocation || hasCoarseLocation
    }

    private fun isLocationEnabled(): Boolean {
        val locationManager = getSystemService(Context.LOCATION_SERVICE) as LocationManager
        val gpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)
        val networkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)

        Log.d(TAG, "üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ª–æ–∫–∞—Ü–∏–∏: GPS=$gpsEnabled, NETWORK=$networkEnabled")

        return gpsEnabled || networkEnabled
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                NOTIFICATION_CHANNEL_ID,
                "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞",
                NotificationManager.IMPORTANCE_LOW
            ).apply {
                description = "–ö–∞–Ω–∞–ª –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π"
                setShowBadge(false)
            }
            val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            manager.createNotificationChannel(channel)
            Log.d(TAG, "‚úÖ –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω")
        }
    }

    private fun updateNotification(text: String) {
        try {
            val notification = NotificationCompat.Builder(this, NOTIFICATION_CHANNEL_ID)
                .setContentTitle("üìç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞")
                .setContentText(text)
                .setSmallIcon(R.drawable.ic_location)
                .setPriority(NotificationCompat.PRIORITY_MAX)
                .setOngoing(true)
                .setCategory(Notification.CATEGORY_SERVICE)
                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                .build()

            val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.notify(NOTIFICATION_ID, notification)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", e)
        }
    }

    private fun showBatteryOptimizationNotification() {
        val notification = NotificationCompat.Builder(this, NOTIFICATION_CHANNEL_ID)
            .setContentTitle("üîã –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞—Ç–∞—Ä–µ–∏")
            .setContentText("–û—Ç–∫–ª—é—á–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–∫–µ—Ä–∞")
            .setSmallIcon(R.drawable.ic_location)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setAutoCancel(true)
            .build()

        val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        manager.notify(4, notification)
    }

    private fun showPermissionNotification() {
        val notification = NotificationCompat.Builder(this, NOTIFICATION_CHANNEL_ID)
            .setContentTitle("üìç –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")
            .setContentText("–î–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏–∏")
            .setSmallIcon(R.drawable.ic_location)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .build()

        val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        manager.notify(2, notification)
    }

    private fun showLocationDisabledNotification() {
        val notification = NotificationCompat.Builder(this, NOTIFICATION_CHANNEL_ID)
            .setContentTitle("üìç –í–∫–ª—é—á–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
            .setContentText("–î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–∫–µ—Ä–∞ –≤–∫–ª—é—á–∏—Ç–µ GPS")
            .setSmallIcon(R.drawable.ic_location)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .build()

        val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        manager.notify(3, notification)
    }

    private fun handleLocationError() {
        Log.w(TAG, "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥")
        handler.postDelayed({
            if (isRunning.get()) {
                Log.d(TAG, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ª–æ–∫–∞—Ü–∏–∏...")
                serviceScope.launch {
                    setupLocationUpdates()
                }
            }
        }, 10000)
    }

    private fun calculateDistance(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Double {
        val earthRadius = 6371000.0
        val dLat = Math.toRadians(lat2 - lat1)
        val dLon = Math.toRadians(lon2 - lon1)
        val a = sin(dLat / 2).pow(2) + cos(Math.toRadians(lat1)) * cos(Math.toRadians(lat2)) * sin(dLon / 2).pow(2)
        val c = 2 * atan2(sqrt(a), sqrt(1 - a))
        return earthRadius * c
    }

    override fun onDestroy() {
        Log.d(TAG, "üóëÔ∏è –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞")
        stopLocationTracking()
        handler.removeCallbacksAndMessages(null)
        super.onDestroy()
    }

    override fun onBind(intent: Intent?): IBinder? = null
}