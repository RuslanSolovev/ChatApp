// com.example.chatapp.igra_strotegiy.GameMapRenderer.kt
package com.example.chatapp.igra_strotegiy

import android.content.Context
import android.text.TextUtils
import android.util.TypedValue
import android.view.Gravity
import android.widget.FrameLayout
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.TextView
import androidx.core.content.ContextCompat
import com.example.chatapp.R

class GameMapRenderer(
    private val context: Context,
    private val gameLogic: GameLogic,
    private val allPlayers: List<GamePlayer>? = null,
    private val myUid: String? = null, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: —á—Ç–æ–±—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å —Å–≤–æ–∏ –∏ —á—É–∂–∏–µ –∞—Ä–º–∏–∏
    private val onCellClick: (MapCell) -> Unit
) {
    fun render(): LinearLayout {
        val width = gameLogic.gameMap.width
        val height = gameLogic.gameMap.height
        val verticalLayout = LinearLayout(context).apply {
            orientation = LinearLayout.VERTICAL
        }
        for (y in 0 until height) {
            val horizontalLayout = LinearLayout(context).apply {
                orientation = LinearLayout.HORIZONTAL
            }
            for (x in 0 until width) {
                val cell = gameLogic.gameMap.getCell(x, y)!!
                val cellView = createCellView(cell)
                cellView.setOnClickListener { onCellClick(cell) }
                horizontalLayout.addView(cellView)
            }
            verticalLayout.addView(horizontalLayout)
        }
        return verticalLayout
    }

    private fun createCellView(cell: MapCell): FrameLayout {
        val cellSizeDp = 50
        val marginDp = 3
        val bottomTextMarginDp = 5
        val frame = FrameLayout(context).apply {
            val params = LinearLayout.LayoutParams(dpToPx(cellSizeDp), dpToPx(cellSizeDp))
            params.setMargins(dpToPx(marginDp), dpToPx(marginDp), dpToPx(marginDp), dpToPx(marginDp))
            layoutParams = params
            setBackgroundResource(R.drawable.cell_background)
        }
        val imageView = ImageView(context).apply {
            scaleType = ImageView.ScaleType.CENTER_CROP
            layoutParams = FrameLayout.LayoutParams(
                FrameLayout.LayoutParams.MATCH_PARENT,
                FrameLayout.LayoutParams.MATCH_PARENT
            )
        }
        val textView = TextView(context).apply {
            gravity = Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL
            setTextColor(ContextCompat.getColor(context, android.R.color.white))
            setTextSize(TypedValue.COMPLEX_UNIT_SP, 11f)
            setShadowLayer(3f, 0f, 0f, ContextCompat.getColor(context, android.R.color.black))
            maxLines = 3
            ellipsize = TextUtils.TruncateAt.END
            layoutParams = FrameLayout.LayoutParams(
                FrameLayout.LayoutParams.WRAP_CONTENT,
                FrameLayout.LayoutParams.WRAP_CONTENT
            ).apply {
                bottomMargin = dpToPx(bottomTextMarginDp)
                gravity = Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL
            }
        }

        // === üî• –û–¢–†–ò–°–û–í–ö–ê –ê–†–ú–ò–ô (–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä) ===
        if (allPlayers != null) {
            val armiesHere = mutableListOf<Pair<Army, GamePlayer>>()
            for (player in allPlayers) {
                val armies = player.gameLogic.armies.filter {
                    it.position.x == cell.x && it.position.y == cell.y && it.isAlive()
                }
                armies.forEach { army ->
                    armiesHere.add(Pair(army, player))
                }
            }

            if (armiesHere.isNotEmpty()) {
                // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∞—Ä–º–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                val (army, owner) = armiesHere.first()
                val isOwn = owner.uid == myUid

                // –í GameMapRenderer.kt, –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∞—Ä–º–∏–π
                imageView.setImageResource(
                    if (isOwn) R.drawable.ic_army_own else R.drawable.ic_army_enemy
                )

                // –ü–æ–¥–ø–∏—Å—å
                val totalUnits = army.units.size
                val ownerName = if (isOwn) "–¢—ã" else owner.displayName.take(6)
                textView.text = "$ownerName\n–ê—Ä–º–∏—è\n$totalUnits —é–Ω."

                // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: –∑–µ–ª—ë–Ω—ã–π ‚Äî —Å–≤–æ–π, –∫—Ä–∞—Å–Ω—ã–π ‚Äî —á—É–∂–æ–π
                textView.setTextColor(
                    if (isOwn) ContextCompat.getColor(context, android.R.color.holo_green_light)
                    else ContextCompat.getColor(context, android.R.color.holo_red_light)
                )

                frame.addView(imageView)
                frame.addView(textView)
                return frame
            }
        }

        // –í—Ä–∞–≥–∏ (–æ–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞)
        val enemyEntry = gameLogic.enemyPositions.entries.find { (_, pos) ->
            pos.first == cell.x && pos.second == cell.y
        }
        if (enemyEntry != null) {
            val enemyId = enemyEntry.key.toIntOrNull()
            val enemy = gameLogic.enemies.find { it.id == enemyId }
            if (enemy != null && enemy.isAlive()) {
                imageView.setImageResource(R.drawable.ic_enemy)
                textView.text = "${enemy.name}\nHP: ${enemy.health}"
                frame.addView(imageView)
                frame.addView(textView)
                return frame
            }
        }

        // –í—Ä–∞–∂–µ—Å–∫–∞—è –±–∞–∑–∞
        if (cell.x == gameLogic.enemyBase?.x && cell.y == gameLogic.enemyBase?.y && !gameLogic.enemyBase!!.isDestroyed()) {
            imageView.setImageResource(R.drawable.ic_enemy_base)
            textView.text = "–ë–∞–∑–∞\nHP: ${gameLogic.enemyBase!!.health}/${gameLogic.enemyBase!!.maxHealth}"
            frame.addView(imageView)
            frame.addView(textView)
            return frame
        }

        // –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–ê–¢–£–®–ò: –µ—Å–ª–∏ –µ—Å—Ç—å allPlayers ‚Äî –∏—â–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        var foundBuilding: Building? = null
        var buildingOwner: GamePlayer? = null

        if (allPlayers != null) {
            // –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä: –∏—â–µ–º —Ä–∞—Ç—É—à—É –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —É –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            for (player in allPlayers) {
                val pos = player.gameLogic.player.townHallPosition
                if (pos.x == cell.x && pos.y == cell.y) {
                    val townHall = player.gameLogic.player.buildings.find { it is Building.TownHall && !it.isDestroyed() }
                    if (townHall != null) {
                        foundBuilding = townHall
                        buildingOwner = player
                        break
                    }
                }
            }
        }

        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞—Ç—É—à—É –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ
        if (foundBuilding != null && foundBuilding is Building.TownHall) {
            val ownerName = buildingOwner?.displayName?.take(5) ?: "–ò–≥—Ä–æ–∫"
            imageView.setImageResource(R.drawable.ic_town_hall)
            textView.text = "–†–∞—Ç—É—à–∞\n$ownerName\nHP: ${foundBuilding.health}/${foundBuilding.maxHealth}"

            // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–¥–æ—Ä–æ–≤—å—è
            val healthPercent = foundBuilding.health.toFloat() / foundBuilding.maxHealth.toFloat()
            textView.setTextColor(when {
                healthPercent > 0.7 -> ContextCompat.getColor(context, android.R.color.holo_green_light)
                healthPercent > 0.3 -> ContextCompat.getColor(context, android.R.color.holo_orange_light)
                else -> ContextCompat.getColor(context, android.R.color.holo_red_light)
            })

            frame.addView(imageView)
            frame.addView(textView)
            return frame
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞—Ç—É—à—É (–∏–ª–∏ –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä–µ), –∏—â–µ–º –æ–±—ã—á–Ω—ã–µ –∑–¥–∞–Ω–∏—è
        if (foundBuilding == null) {
            foundBuilding = gameLogic.player.buildings.find { building ->
                building.type == cell.type && !building.isDestroyed()
            }
        }

        if (foundBuilding != null) {
            val (imageRes, text) = when (foundBuilding.type) {
                "hut" -> R.drawable.ic_hut to "–•–∏–∂–∏–Ω–∞\n–£—Ä.${foundBuilding.level}"
                "well" -> R.drawable.ic_well to "–ö–æ–ª–æ–¥–µ—Ü\n–£—Ä.${foundBuilding.level}"
                "sawmill" -> R.drawable.ic_sawmill to "–õ–µ—Å–æ–ø–∏–ª–∫–∞\n–£—Ä.${foundBuilding.level}"
                "fishing_hut" -> R.drawable.ic_fishing_hut to "–†—ã–±–æ–ª–æ–≤—Å—Ç–≤–æ\n–£—Ä.${foundBuilding.level}"
                "farm" -> R.drawable.ic_farm to "–§–µ—Ä–º–∞\n–£—Ä.${foundBuilding.level}"
                "quarry" -> R.drawable.ic_quarry to "–ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è\n–£—Ä.${foundBuilding.level}"
                "gold_mine" -> R.drawable.ic_gold_mine to "–ó–æ–ª–æ—Ç–æ\n–£—Ä.${foundBuilding.level}"
                "forge" -> R.drawable.ic_forge to "–ö—É–∑–Ω–∏—Ü–∞\n–£—Ä.${foundBuilding.level}"
                "iron_mine" -> R.drawable.ic_forge to "–ñ–µ–ª–µ–∑–æ\n–£—Ä.${foundBuilding.level}"
                "castle" -> R.drawable.ic_forge to "–ó–∞–º–æ–∫\n–£—Ä.${foundBuilding.level}"
                "blacksmith" -> R.drawable.ic_forge to "–û—Ä—É–∂–µ–π–Ω–∞—è\n–£—Ä.${foundBuilding.level}"
                "coal_mine" -> R.drawable.ic_forge to "–£–≥–æ–ª—å\n–£—Ä.${foundBuilding.level}"
                "oil_rig" -> R.drawable.ic_forge to "–ù–µ—Ñ—Ç—å\n–£—Ä.${foundBuilding.level}"
                "factory" -> R.drawable.ic_forge to "–§–∞–±—Ä–∏–∫–∞\n–£—Ä.${foundBuilding.level}"
                "power_plant" -> R.drawable.ic_forge to "–≠–Ω–µ—Ä–≥–∏—è\n–£—Ä.${foundBuilding.level}"
                "solar_plant" -> R.drawable.ic_forge to "–°–æ–ª–Ω—Ü–µ\n–£—Ä.${foundBuilding.level}"
                "nuclear_plant" -> R.drawable.ic_forge to "–†–µ–∞–∫—Ç–æ—Ä\n–£—Ä.${foundBuilding.level}"
                "robotics_lab" -> R.drawable.ic_forge to "–†–æ–±–æ—Ç—ã\n–£—Ä.${foundBuilding.level}"
                "barracks" -> R.drawable.ic_barracks to "–ö–∞–∑–∞—Ä–º—ã\n–£—Ä.${foundBuilding.level}"
                "research_center" -> R.drawable.ic_forge to "–ù–∞—É–∫–∞\n–£—Ä.${foundBuilding.level}"
                "town_hall" -> R.drawable.ic_town_hall to "–†–∞—Ç—É—à–∞\nHP: ${foundBuilding.health}/${foundBuilding.maxHealth}"
                else -> R.drawable.ic_empty to foundBuilding.name
            }
            imageView.setImageResource(imageRes)
            textView.text = text
            frame.addView(imageView)
            frame.addView(textView)
            return frame
        }

        // –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        val (imageRes, text) = when (cell.type) {
            "empty" -> R.drawable.ic_empty to ""
            "mountain" -> R.drawable.ic_mountain to "–ì–æ—Ä–∞"
            "river" -> R.drawable.ic_river to "–†–µ–∫–∞"
            else -> R.drawable.ic_empty to cell.type
        }
        imageView.setImageResource(imageRes)
        textView.text = text
        frame.addView(imageView)
        frame.addView(textView)
        return frame
    }

    private fun dpToPx(dp: Int): Int {
        return (dp * context.resources.displayMetrics.density).toInt()
    }
}