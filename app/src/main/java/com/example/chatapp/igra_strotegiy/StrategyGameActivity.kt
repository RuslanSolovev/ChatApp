package com.example.chatapp.igra_strotegiy

import android.app.AlertDialog
import android.content.Context
import android.os.Build
import android.os.Bundle
import android.os.VibrationEffect
import android.os.Vibrator
import android.widget.Button
import android.widget.FrameLayout
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import com.example.chatapp.R
import com.google.gson.Gson
import com.google.gson.GsonBuilder

class StrategyGameActivity : AppCompatActivity() {

    private lateinit var gameLogic: GameLogic
    private var selectedBuilding: Building? = null

    private lateinit var tvPlayerInfo: TextView
    private lateinit var tvStatus: TextView
    private lateinit var mapContainer: FrameLayout

    private lateinit var btnBuild: Button
    private lateinit var btnNextTurn: Button
    private lateinit var btnNewGame: Button

    private lateinit var gameMapRenderer: GameMapRenderer
    private var vibrator: Vibrator? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_strategy_game)

        vibrator = getSystemService(Context.VIBRATOR_SERVICE) as? Vibrator

        tvPlayerInfo = findViewById(R.id.tvPlayerInfo)
        tvStatus = findViewById(R.id.tvStatus)
        mapContainer = findViewById(R.id.mapContainer)

        btnBuild = findViewById(R.id.btnBuild)
        btnNextTurn = findViewById(R.id.btnNextTurn)
        btnNewGame = findViewById(R.id.btnNewGame)

        gameLogic = loadGameState() ?: GameLogic()
        gameLogic.initializeEnemiesIfNeeded()

        gameMapRenderer = GameMapRenderer(this, gameLogic) { cell ->
            handleCellClick(cell)
        }

        refreshGameView()

        btnBuild.setOnClickListener { showBuildMenu() }
        btnNextTurn.setOnClickListener {
            gameLogic.nextTurn()
            refreshGameView()
        }
        btnNewGame.setOnClickListener {
            // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
            getSharedPreferences("GameState", Context.MODE_PRIVATE)
                .edit()
                .remove("game_state")
                .apply()

            gameLogic = GameLogic()
            gameLogic.initializeEnemiesIfNeeded()
            // üî• –ö–ª—é—á–µ–≤–æ–µ: –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä —Å –Ω–æ–≤—ã–º gameLogic
            gameMapRenderer = GameMapRenderer(this, gameLogic) { cell ->
                handleCellClick(cell)
            }
            refreshGameView()
            Toast.makeText(this@StrategyGameActivity, "–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", Toast.LENGTH_SHORT).show()
        }
    }

    private fun showBuildMenu() {
        val buildings = arrayOf(
            "–õ–µ—Å–æ–ø–∏–ª–∫–∞ (10–î)",
            "–§–µ—Ä–º–∞ (8–î,2–í)",
            "–ö–æ–ª–æ–¥–µ—Ü (5–î,3–ö)",
            "–ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è (2–í,10–ö)",
            "–ó–æ–ª–æ—Ç–∞—è —à–∞—Ö—Ç–∞ (10–î,5–ï,5–í,10–ö)",
            "–ö–∞–∑–∞—Ä–º—ã (15–î,5–ï)",
        )

        AlertDialog.Builder(this)
            .setTitle("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏–µ")
            .setItems(buildings) { _, index ->
                val building = when (index) {
                    0 -> Building.Sawmill()
                    1 -> Building.Farm()
                    2 -> Building.Well()
                    3 -> Building.Quarry()
                    4 -> Building.GoldMine()
                    5 -> Building.Barracks()
                    else -> null
                }
                if (building != null) {
                    selectedBuilding = building
                    Toast.makeText(this, "–í—ã–±—Ä–∞–Ω–æ: ${building.name}", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }

    private fun handleCellClick(cell: MapCell) {
        // –ê—Ç–∞–∫–∞ –≤—Ä–∞–≥–∞ –∏–ª–∏ –≤—Ä–∞–∂–µ—Å–∫–æ–π –±–∞–∑—ã
        if (gameLogic.enemyPositions.values.any { it.first == cell.x && it.second == cell.y } ||
            (gameLogic.enemyBase?.x == cell.x && gameLogic.enemyBase?.y == cell.y && !gameLogic.enemyBase!!.isDestroyed())) {
            val msg = gameLogic.attackTarget(cell.x, cell.y)
            Toast.makeText(this@StrategyGameActivity, msg, Toast.LENGTH_LONG).show()
            refreshGameView()
            return
        }

        // –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
        if (cell.isBuildable()) {
            val b = selectedBuilding ?: run {
                Toast.makeText(this@StrategyGameActivity, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å'!", Toast.LENGTH_SHORT).show()
                return
            }
            if (gameLogic.buildBuildingOnMap(b, cell.x, cell.y)) {
                refreshGameView()
                Toast.makeText(this@StrategyGameActivity, "${b.name} –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ!", Toast.LENGTH_SHORT).show()
                selectedBuilding = null
            } else {
                Toast.makeText(this@StrategyGameActivity, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ –Ω–µ–ª—å–∑—è —Å—Ç—Ä–æ–∏—Ç—å –∑–¥–µ—Å—å!", Toast.LENGTH_SHORT).show()
            }
            return
        }

        // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ –∑–¥–∞–Ω–∏–µ–º
        val building = gameLogic.player.buildings.find {
            it.type == cell.type && !it.isDestroyed()
        } ?: return

        when (building) {
            is Building.Barracks -> showBarracksMenu()
            else -> showBuildingUpgradeMenu(building)
        }
    }

    private fun showBarracksMenu() {
        AlertDialog.Builder(this)
            .setTitle("–ö–∞–∑–∞—Ä–º—ã")
            .setItems(arrayOf("–°–æ–ª–¥–∞—Ç (10–î,5–ï)", "–õ—É—á–Ω–∏–∫ (15–î,5–ï,5–ö)", "–¢–∞–Ω–∫ (20–î,10–ï,5–í,15–ö,5–ó)")) { _, i ->
                val success = when (i) {
                    0 -> gameLogic.hireUnitFromBarracks(GameUnit.Soldier())
                    1 -> gameLogic.hireUnitFromBarracks(GameUnit.Archer())
                    2 -> gameLogic.hireUnitFromBarracks(GameUnit.Tank())
                    else -> false
                }
                if (success) {
                    refreshGameView()
                    Toast.makeText(this@StrategyGameActivity, "–Æ–Ω–∏—Ç –Ω–∞–Ω—è—Ç!", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(this@StrategyGameActivity, "–ù–µ—Ç –∫–∞–∑–∞—Ä–º –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤!", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }

    private fun showBuildingUpgradeMenu(building: Building) {
        if (building.level >= 10) {
            Toast.makeText(this@StrategyGameActivity, "–ú–∞–∫—Å. —É—Ä–æ–≤–µ–Ω—å!", Toast.LENGTH_SHORT).show()
            return
        }
        val cost = building.upgradeCost()
        AlertDialog.Builder(this)
            .setTitle("–£–ª—É—á—à–∏—Ç—å ${building.name}?")
            .setMessage("–£—Ä. ${building.level} ‚Üí ${building.level + 1}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: $cost")
            .setPositiveButton("–£–ª—É—á—à–∏—Ç—å") { _, _ ->
                if (gameLogic.upgradeBuilding(building)) {
                    refreshGameView()
                    Toast.makeText(this@StrategyGameActivity, "–£–ª—É—á—à–µ–Ω–æ!", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(this@StrategyGameActivity, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }

    private fun refreshGameView() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        mapContainer.removeAllViews()
        val mapLayout = gameMapRenderer.render()
        mapContainer.addView(mapLayout)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        tvPlayerInfo.post {
            tvPlayerInfo.text = gameLogic.getPlayerInfo()
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        tvStatus.post {
            when {
                gameLogic.isPlayerWon() -> {
                    tvStatus.text = "üèÜ –ü–û–ë–ï–î–ê! –í—Ä–∞–∂–µ—Å–∫–∞—è –±–∞–∑–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞!"
                    tvStatus.setTextColor(ContextCompat.getColor(this@StrategyGameActivity, android.R.color.holo_green_dark))
                }
                gameLogic.isPlayerDefeated() -> {
                    tvStatus.text = "üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï! –í–∞—à–∞ –±–∞–∑–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞!"
                    tvStatus.setTextColor(ContextCompat.getColor(this@StrategyGameActivity, android.R.color.holo_red_dark))
                }
                gameLogic.lastAttackMessage.isNotEmpty() -> {
                    tvStatus.text = gameLogic.lastAttackMessage
                    val color = if (gameLogic.lastAttackMessage.contains("–†–ê–¢–£–®–£")) {
                        ContextCompat.getColor(this@StrategyGameActivity, android.R.color.holo_red_dark)
                    } else {
                        ContextCompat.getColor(this@StrategyGameActivity, R.color.primaryColor)
                    }
                    tvStatus.setTextColor(color)

                    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ –Ω–∞ –±–∞–∑—É
                    if (gameLogic.lastAttackMessage.contains("–†–ê–¢–£–®–£")) {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                            vibrator?.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE))
                        } else {
                            vibrator?.vibrate(200)
                        }
                    }

                    Toast.makeText(this@StrategyGameActivity, gameLogic.lastAttackMessage, Toast.LENGTH_LONG).show()
                    gameLogic.lastAttackMessage = ""
                }
                else -> {
                    tvStatus.text = "–ì–æ—Ç–æ–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é"
                    tvStatus.setTextColor(ContextCompat.getColor(this@StrategyGameActivity, R.color.primaryDarkColor))
                }
            }
        }
    }

    private fun saveGameState() {
        getSharedPreferences("GameState", Context.MODE_PRIVATE)
            .edit()
            .putString("game_state", getGson().toJson(gameLogic))
            .apply()
    }

    private fun loadGameState(): GameLogic? {
        return try {
            val json = getSharedPreferences("GameState", Context.MODE_PRIVATE)
                .getString("game_state", null)
            if (json != null) {
                getGson().fromJson(json, GameLogic::class.java)
            } else {
                null
            }
        } catch (e: Exception) {
            e.printStackTrace()
            null
        }
    }

    private fun getGson(): Gson = GsonBuilder()
        .registerTypeAdapter(Building::class.java, BuildingTypeAdapter)
        .registerTypeAdapter(GameUnit::class.java, GameUnitTypeAdapter)
        .create()

    override fun onPause() {
        super.onPause()
        saveGameState()
    }
}