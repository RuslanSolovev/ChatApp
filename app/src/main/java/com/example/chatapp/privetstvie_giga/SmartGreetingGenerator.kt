package com.example.chatapp.privetstvie_giga

import android.content.Context
import android.util.Log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.util.*
import kotlin.random.Random

class SmartQuestionGenerator(
    private val context: Context,
    private val userProfile: UserProfile?
) {
    private val analyzer = SmartContextAnalyzer(context)
    private val random = Random(System.currentTimeMillis())

    // Кэширование для производительности
    private var cachedCompleteGreeting: Triple<String, String, String>? = null
    private var lastGreetingGenerationTime: Long = 0
    private val GREETING_CACHE_TIMEOUT = 60000L // 1 минута

    // Предварительно вычисленные списки для производительности
    private val weekdays = listOf(Calendar.MONDAY, Calendar.TUESDAY, Calendar.WEDNESDAY, Calendar.THURSDAY, Calendar.FRIDAY)
    private val weekendDays = listOf(Calendar.SATURDAY, Calendar.SUNDAY)
    private val morningHours = 5..11
    private val dayHours = 12..17
    private val eveningHours = 18..23

    companion object {
        private const val TAG = "SmartQuestionGenerator"

        // УВЕЛИЧЕННЫЕ В 3+ РАЗА ШАБЛОНЫ ПРИВЕТСТВИЙ (ВСЕ ФРАЗЫ СОХРАНЕНЫ)
        private val MORNING_GREETINGS = listOf(
            "Доброе утро", "С добрым утром", "Приветствую с утра", "Прекрасного утра",
            "Утреннего настроения", "Свежего утра", "Бодрого утра", "Яркого утра",
            "Теплого утра", "Солнечного утра", "Начала хорошего дня", "Пробуждения",
            "Утренней свежести", "Начала дня", "Утреннего солнца", "Утреннего кофе",
            "Пробуждения с улыбкой", "Начала продуктивного дня", "Утренней энергии"
        )
        private val DAY_GREETINGS = listOf(
            "Добрый день", "Приветствую", "Здравствуйте", "Прекрасного дня",
            "Хорошего дня", "Продуктивного дня", "Удачного дня", "Светлого дня",
            "Теплого дня", "Яркого дня", "Дневного настроения", "Активного дня",
            "Интересного дня", "Насыщенного дня", "Плодотворного дня", "Дня успехов",
            "Дня достижений", "Дня возможностей", "Дня открытий"
        )
        private val EVENING_GREETINGS = listOf(
            "Добрый вечер", "Приветствую вечером", "Доброй ночи", "Тихого вечера",
            "Спокойного вечера", "Уютного вечера", "Теплого вечера", "Романтичного вечера",
            "Вечернего настроения", "Вечернего отдыха", "Вечерней гармонии", "Вечернего уюта",
            "Вечернего спокойствия", "Вечерних мечтаний", "Вечернего времени", "Вечерней свежести",
            "Вечернего ветерка", "Вечернего чая", "Вечерней беседы"
        )

        // УВЕЛИЧЕННЫЕ ФОРМЫ ОБРАЩЕНИЯ (ВСЕ ФРАЗЫ СОХРАНЕНЫ)
        private val NAME_FORMATS = listOf(
            "{name}", "дорогой {name}", "уважаемый {name}", "{name}", "милый {name}",
            "любимый {name}", "дорогой друг {name}", "уважаемый друг {name}", "многоуважаемый {name}",
            "драгоценный {name}", "незаменимый {name}", "уникальный {name}", "особенный {name}",
            "замечательный {name}", "прекрасный {name}", "чудесный {name}", "восхитительный {name}",
            "неповторимый {name}", "интересный {name}", "заботливый {name}"
        )

        // УВЕЛИЧЕННЫЕ СТАТИЧНЫЕ ФРАЗЫ (ВСЕ ФРАЗЫ СОХРАНЕНЫ)
        private val STATIC_WELCOME_PHRASES = listOf(
            "Рад вас видеть!", "Очень рад нашей встрече!", "Прекрасно вас видеть!",
            "Всегда вам рад!", "Как же я рад вам!", "Какая приятная встреча!",
            "Вы не представляете, как я рад!", "Это так здорово видеть вас!",
            "Мой день стал лучше от вашего появления!", "Вы делаете этот день особенным!",
            "Ваше присутствие согревает!", "Вы принесли с собой столько света!",
            "Как же хорошо, что вы здесь!", "Вы наполняете пространство теплом!",
            "Ваше появление - настоящий подарок!", "Я так ждал этой встречи!",
            "Вы приносите столько радости!", "Этот момент стал волшебным благодаря вам!",
            "Ваше присутствие вдохновляет!", "Вы делаете мир лучше просто своим появлением!",
            "Как же прекрасно вас видеть!", "Вы - лучшая часть моего дня!",
            "Ваша энергия заряжает позитивом!", "Вы принесли с собой улыбки!",
            "Этот день стал ярче с вашим приходом!", "Вы - настоящее солнышко!",
            "Ваше присутствие - это праздник!", "Вы наполняете комнату светом!",
            "Как же я скучал по нашему общению!", "Вы делаете каждую встречу особенной!"
        )

        // УВЕЛИЧЕННЫЕ ОБЩИЕ ВОПРОСЫ (ВСЕ ФРАЗЫ СОХРАНЕНЫ)
        private val GENERIC_PERSONAL_QUESTIONS = listOf(
            "Как ваши дела?", "Что нового в вашей жизни?", "Как проходит ваш день?",
            "Что хорошего случилось сегодня?", "Какие планы на сегодня?",
            "Как настроение?", "Что вдохновляет вас сегодня?", "Какие маленькие радости были сегодня?",
            "О чем мечтаете в последнее время?", "Чем планируете заняться в ближайшее время?",
            "Есть ли что-то, что вас беспокоит?", "Что вызывает улыбку сегодня?",
            "Какие мысли занимают ваш ум?", "Что делает ваш день особенным?",
            "Какие цели на сегодня?", "Что вас радует в последнее время?",
            "Какие открытия сделали за последнее время?", "Что изучаете нового?",
            "Какие книги или фильмы впечатлили?", "О чем размышляли в последнее время?",
            "Что мотивирует вас сегодня?", "Какие достижения порадовали?",
            "Что помогает расслабиться?", "Какие привычки развиваете?",
            "Что делает вас счастливым?", "Какие встречи запомнились?",
            "Что узнали нового о себе?", "Какие навыки совершенствуете?",
            "Что вдохновляет на творчество?", "Какие места хотите посетить?"
        )
    }

    /**
     * Генерирует контекстное приветствие (Часть 1) - ОПТИМИЗИРОВАНО
     */
    suspend fun generateContextualGreeting(): String = withContext(Dispatchers.IO) {
        return@withContext try {
            val userName = getCurrentUserName()
            generateTimeBasedGreeting(userName)
        } catch (e: Exception) {
            Log.e(TAG, "Error generating contextual greeting", e)
            "Привет, ${getCurrentUserName()}!"
        }
    }

    /**
     * Генерирует вопрос для продолжения беседы (Часть 2 или 3) - ОПТИМИЗИРОВАНО
     */
    suspend fun generateFollowUpQuestion(): String = withContext(Dispatchers.IO) {
        return@withContext try {
            val deepContext = analyzer.analyzeDeepContext()
            generateContextBasedQuestion(deepContext)
        } catch (e: Exception) {
            Log.e(TAG, "Error generating follow-up question", e)
            "Как ваши дела?"
        }
    }

    /**
     * Генерирует полное приветствие из 3 частей с кэшированием - ОПТИМИЗИРОВАНО
     */
    suspend fun generateCompleteGreeting(): Triple<String, String, String> = withContext(Dispatchers.IO) {
        val currentTime = System.currentTimeMillis()

        // Возвращаем кэшированный результат если не устарел
        cachedCompleteGreeting?.let { greeting ->
            if (currentTime - lastGreetingGenerationTime < GREETING_CACHE_TIMEOUT) {
                return@withContext greeting
            }
        }

        return@withContext try {
            val deepContext = analyzer.analyzeDeepContext()
            val userName = getCurrentUserName()

            // Часть 1: Приветствие по времени + имя
            val greetingPart = generateTimeBasedGreeting(userName)

            // Часть 2: Статичная фраза
            val staticPhrase = generateStaticWelcomePhrase()

            // Часть 3: Контекстный вопрос на основе анкеты
            val contextQuestion = generateContextualQuestion()

            Triple(greetingPart, staticPhrase, contextQuestion).also {
                cachedCompleteGreeting = it
                lastGreetingGenerationTime = currentTime
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error generating complete greeting", e)
            Triple(
                "Привет, ${getCurrentUserName()}!",
                "Рад вас видеть!",
                "Чем могу помочь?"
            )
        }
    }

    /**
     * Часть 1: Приветствие по времени суток с разными формами имени - ОПТИМИЗИРОВАНО
     */
    private fun generateTimeBasedGreeting(userName: String): String {
        val timeGreeting = getTimeBasedGreeting()
        val nameFormat = NAME_FORMATS.random()
        val formattedName = nameFormat.replace("{name}", userName)
        return "$timeGreeting, $formattedName!"
    }

    private fun getTimeBasedGreeting(): String {
        val calendar = Calendar.getInstance()
        val hour = calendar.get(Calendar.HOUR_OF_DAY)
        return when (hour) {
            in morningHours -> MORNING_GREETINGS.random()
            in dayHours -> DAY_GREETINGS.random()
            in eveningHours -> EVENING_GREETINGS.random()
            else -> "Доброй ночи"
        }
    }

    /**
     * Часть 2: Статичная приветственная фраза - ОПТИМИЗИРОВАНО
     */
    private fun generateStaticWelcomePhrase(): String {
        return STATIC_WELCOME_PHRASES.random()
    }

    /**
     * Часть 3: Контекстный вопрос на основе анкеты пользователя - ОПТИМИЗИРОВАНО
     */
    private fun generateContextualQuestion(): String {
        return try {
            userProfile?.let { profile ->
                // ПРИОРИТЕТ 1: Работа и профессия (самое важное)
                if (profile.occupation.isNotEmpty()) {
                    return generateWorkBasedQuestion(profile)
                }
                // ПРИОРИТЕТ 2: Хобби и интересы
                profile.getHobbiesList().firstOrNull()?.let { mainHobby ->
                    return generateHobbyBasedQuestion(profile, mainHobby)
                }
                // ПРИОРИТЕТ 3: Семья и дети
                if (profile.hasChildren) {
                    return generateFamilyBasedQuestion(profile)
                }
                // ПРИОРИТЕТ 4: Спорт и здоровье
                if (profile.fitnessLevel.isNotEmpty() && profile.fitnessLevel != "Не занимаюсь спортом") {
                    return generateFitnessBasedQuestion(profile)
                }
                // ПРИОРИТЕТ 5: Цели и развитие
                profile.getCurrentGoalsList().firstOrNull()?.let { mainGoal ->
                    return generateGoalBasedQuestion(mainGoal)
                }
                // ПРИОРИТЕТ 6: Музыкальные предпочтения
                if (profile.musicPreferences.isNotEmpty()) {
                    return generateMusicBasedQuestion(profile)
                }
                // ПРИОРИТЕТ 7: Кулинарные предпочтения
                if (profile.foodPreferences.isNotEmpty() || profile.cookingHabit.isNotEmpty()) {
                    return generateFoodBasedQuestion(profile)
                }
            }
            // Fallback: общий вопрос на основе времени
            generateTimeBasedQuestion()
        } catch (e: Exception) {
            Log.e(TAG, "Error generating contextual question", e)
            "Как прошел ваш день?"
        }
    }

    /**
     * Вопросы на основе работы пользователя (ВСЕ ФРАЗЫ СОХРАНЕНЫ) - ОПТИМИЗИРОВАНО
     */
    private fun generateWorkBasedQuestion(profile: UserProfile): String {
        val calendar = Calendar.getInstance()
        val hour = calendar.get(Calendar.HOUR_OF_DAY)
        val isWeekend = calendar.get(Calendar.DAY_OF_WEEK) in weekendDays
        val questions = mutableListOf<String>()

        if (!isWeekend) {
            when {
                hour in morningHours -> questions.addAll(listOf(
                    "Как настроение перед рабочим днем в ${profile.occupation}?",
                    "Готовы к новым задачам в ${profile.occupation}?",
                    "Какие планы на работе сегодня в сфере ${profile.occupation}?",
                    "Что вдохновляет вас в работе ${profile.occupation} сегодня?",
                    "Какие вызовы ждут в ${profile.occupation} сегодня?",
                    "Над какими проектами работаете в ${profile.occupation}?",
                    "Что самое интересное в работе ${profile.occupation} сегодня?",
                    "Какие цели ставите в ${profile.occupation} на этот день?",
                    "Что мотивирует в профессии ${profile.occupation}?",
                    "Какие навыки применяете сегодня в ${profile.occupation}?",
                    "Что нового узнаете в сфере ${profile.occupation}?",
                    "Как начинается ваш рабочий день в ${profile.occupation}?"
                ))
                hour in dayHours -> questions.addAll(listOf(
                    "Как проходит рабочий день в ${profile.occupation}?",
                    "Есть интересные задачи в ${profile.occupation}?",
                    "Как продвигаются проекты в ${profile.occupation}?",
                    "Что увлекательного происходит в ${profile.occupation}?",
                    "Какие достижения уже есть сегодня в ${profile.occupation}?",
                    "Над чем работаете в ${profile.occupation} прямо сейчас?",
                    "Что вдохновляет в работе ${profile.occupation} сегодня?",
                    "Какие встречи или обсуждения были в ${profile.occupation}?",
                    "Что изучаете нового в ${profile.occupation}?",
                    "Какой самый интересный аспект ${profile.occupation} сегодня?",
                    "Что радует в профессиональной деятельности?",
                    "Какие вызовы преодолеваете в ${profile.occupation}?"
                ))
                hour in eveningHours -> questions.addAll(listOf(
                    "Как прошел рабочий день в ${profile.occupation}?",
                    "Успели отдохнуть после работы в ${profile.occupation}?",
                    "Какие были достижения сегодня в ${profile.occupation}?",
                    "Что запомнилось больше всего в работе сегодня?",
                    "Какие уроки извлекли из рабочего дня?",
                    "Что планируете на завтра в ${profile.occupation}?",
                    "Какой опыт получили сегодня в ${profile.occupation}?",
                    "Что вдохновило в профессиональной деятельности?",
                    "Какие навыки улучшили сегодня?",
                    "Что было самым сложным в ${profile.occupation} сегодня?",
                    "Какой момент работы сегодня запомнится?",
                    "Что ценного принес сегодняшний день в ${profile.occupation}?"
                ))
            }
        } else {
            questions.addAll(listOf(
                "Как отдыхаете от работы в ${profile.occupation}?",
                "Вспоминаете рабочие моменты из ${profile.occupation}?",
                "Планируете что-то связанное с ${profile.occupation} на выходных?",
                "Как проводите время away от ${profile.occupation}?",
                "Что самое приятное в отдыхе от ${profile.occupation}?",
                "Мечтаете о рабочих проектах в ${profile.occupation}?",
                "Как восстанавливаете силы после ${profile.occupation}?",
                "Что вдохновляет в профессии ${profile.occupation} в свободное время?",
                "Планируете профессиональное развитие в ${profile.occupation}?",
                "Как хобби сочетается с работой в ${profile.occupation}?",
                "Что нового хотите внедрить в ${profile.occupation}?",
                "Как отдых влияет на продуктивность в ${profile.occupation}?"
            ))
        }
        return questions.random()
    }

    /**
     * Вопросы на основе хобби (ВСЕ ФРАЗЫ СОХРАНЕНЫ) - ОПТИМИЗИРОВАНО
     */
    private fun generateHobbyBasedQuestion(profile: UserProfile, hobby: String): String {
        val lowerHobby = hobby.lowercase()
        return when {
            lowerHobby.contains("чтение") || lowerHobby.contains("книг") -> listOf(
                "Что сейчас читаете из любимой литературы?",
                "Открыли новые интересные книги?",
                "Какой жанр сейчас больше всего увлекает?",
                "Какая книга произвела недавно впечатление?",
                "Что рекомендуете почитать из последнего?",
                "Какой автор вдохновляет вас сейчас?",
                "Что нового узнали из последней прочитанной книги?",
                "Как чтение влияет на ваше настроение?",
                "Есть ли книга, которую перечитываете?",
                "Что ищете в книгах в последнее время?",
                "Какой литературный герой близок вам?",
                "Что открыли для себя в чтении недавно?"
            ).random()
            lowerHobby.contains("спорт") || lowerHobby.contains("трениров") -> listOf(
                "Удалось позаниматься ${profile.sports} сегодня?",
                "Как прогресс в тренировках по ${profile.sports}?",
                "Какие цели в ${profile.sports} сейчас ставите?",
                "Что нового пробуете в ${profile.sports}?",
                "Как ${profile.sports} влияет на ваше самочувствие?",
                "Что вдохновляет в занятиях ${profile.sports}?",
                "Какие достижения в ${profile.sports} радуют?",
                "Как поддерживаете мотивацию в ${profile.sports}?",
                "Что сложного в ${profile.sports} преодолеваете?",
                "Как ${profile.sports} меняет ваш день?",
                "Что открыли для себя в ${profile.sports}?",
                "Как сочетаете ${profile.sports} с другими увлечениями?"
            ).random()
            lowerHobby.contains("музык") -> listOf(
                "Слушали что-то из ${profile.musicPreferences} в последнее время?",
                "Открыли новых исполнителей в жанре ${profile.musicPreferences}?",
                "Какую музыку предпочитаете для настроения?",
                "Что вдохновляет в музыке ${profile.musicPreferences}?",
                "Есть ли трек, который постоянно в плейлисте?",
                "Как музыка ${profile.musicPreferences} влияет на ваш день?",
                "Что нового узнали о жанре ${profile.musicPreferences}?",
                "Посещали концерты ${profile.musicPreferences} недавно?",
                "Какой исполнитель ${profile.musicPreferences} удивляет?",
                "Что ищете в музыке ${profile.musicPreferences}?",
                "Как музыка сопровождает ваш день?",
                "Что открыли в музыке ${profile.musicPreferences} недавно?"
            ).random()
            lowerHobby.contains("путешеств") -> listOf(
                "Вспоминаете недавние поездки?",
                "Планируете новые путешествия?",
                "Какие места из списка желаемого хотите посетить?",
                "Что вдохновляет в путешествиях?",
                "Какой опыт из поездок запомнился?",
                "Что нового узнали в последнем путешествии?",
                "Какие культуры интересуют?",
                "Как путешествия меняют восприятие мира?",
                "Что самое ценное в ваших поездках?",
                "Как планируете маршруты?",
                "Что открыли для себя в путешествиях?",
                "Какой совет дали бы начинающим путешественникам?"
            ).random()
            lowerHobby.contains("кулинар") || lowerHobby.contains("готовк") -> listOf(
                "Готовили что-то из ${profile.favoriteCuisines}?",
                "Пробовали новые рецепты?",
                "Что любите готовить больше всего?",
                "Что вдохновляет в кулинарии?",
                "Какие кухни мира интересуют?",
                "Что нового узнали о ${profile.favoriteCuisines}?",
                "Как кулинария влияет на настроение?",
                "Какие ингредиенты любите использовать?",
                "Что сложного преодолеваете в готовке?",
                "Как развиваете кулинарные навыки?",
                "Что открыли в кулинарии недавно?",
                "Как сочетаете разные кухни?"
            ).random()
            lowerHobby.contains("рисован") || lowerHobby.contains("живопис") -> listOf(
                "Рисовали что-то в последнее время?",
                "Какие техники пробуете?",
                "Что вдохновляет на творчество?",
                "Есть любимые художники?",
                "Как искусство влияет на вашу жизнь?",
                "Что нового открыли в рисовании?",
                "Какие темы интересуют в творчестве?",
                "Как развиваете художественные навыки?",
                "Что сложного в рисовании преодолеваете?",
                "Как творчество меняет ваш день?",
                "Что вдохновляет в искусстве?",
                "Какие материалы любите использовать?"
            ).random()
            lowerHobby.contains("программирован") || lowerHobby.contains("код") -> listOf(
                "Над какими проектами работаете?",
                "Изучаете новые технологии?",
                "Какой язык программирования нравится?",
                "Что вдохновляет в программировании?",
                "Какие задачи решаете сейчас?",
                "Как программирование развивает мышление?",
                "Что нового узнали в IT?",
                "Какие проекты планируете?",
                "Как технологии меняют вашу жизнь?",
                "Что сложного преодолеваете в программировании?",
                "Как развиваете технические навыки?",
                "Что открыли в программировании недавно?"
            ).random()
            else -> listOf(
                "Удалось позаниматься $hobby?",
                "Что нового в увлечении $hobby?",
                "Как прогресс в $hobby?",
                "Что вдохновляет в $hobby?",
                "Какие цели ставите в $hobby?",
                "Как $hobby влияет на вашу жизнь?",
                "Что сложного преодолеваете в $hobby?",
                "Как развиваете навыки в $hobby?",
                "Что открыли в $hobby недавно?",
                "Как $hobby меняет настроение?",
                "Что самое интересное в $hobby?",
                "Как сочетаете $hobby с другими увлечениями?"
            ).random()
        }
    }

    /**
     * Вопросы на основе семьи (ВСЕ ФРАЗЫ СОХРАНЕНЫ) - ОПТИМИЗИРОВАНО
     */
    private fun generateFamilyBasedQuestion(profile: UserProfile): String {
        val childrenAges = profile.getChildrenAgesList()
        return when {
            childrenAges.any { it in 0..3 } -> listOf(
                "Как ваш малыш? Какие новые слова/навыки?",
                "Как справляетесь с родительскими задачами?",
                "Что интересного у ребенка?",
                "Какие моменты с ребенком радуют?",
                "Что нового узнали о своем малыше?",
                "Как находите время для себя?",
                "Какие достижения ребенка гордят?",
                "Как справляетесь с вызовами родительства?",
                "Что вдохновляет в воспитании?",
                "Какие ритуалы с ребенком цените?",
                "Как ребенок меняет вашу жизнь?",
                "Что самое ценное в материнстве/отцовстве?"
            ).random()
            childrenAges.any { it in 4..12 } -> listOf(
                "Как дела у детей? Какие успехи в школе?",
                "Чем увлекаются дети?",
                "Как проводите время с детьми?",
                "Что нового узнали о своих детях?",
                "Какие увлечения детей развиваете?",
                "Как поддерживаете детей в учебе?",
                "Какие семейные традиции создаете?",
                "Что радует в общении с детьми?",
                "Как находите баланс в воспитании?",
                "Какие моменты с детьми запоминаются?",
                "Как дети влияют на вашу жизнь?",
                "Что ценного в родительстве сейчас?"
            ).random()
            childrenAges.any { it in 13..18 } -> listOf(
                "Как ваши подростки? Какие у них планы?",
                "Сложно ли находить общий язык с подростками?",
                "Чем занимаются дети в свободное время?",
                "Как поддерживаете подростков в развитии?",
                "Какие увлечения у ваших подростков?",
                "Как справляетесь с вызовами подросткового возраста?",
                "Что нового узнали о своих детях-подростках?",
                "Как находите общие темы с подростками?",
                "Какие достижения детей радуют?",
                "Как подростки влияют на семейную динамику?",
                "Что ценного в общении с подростками?",
                "Как поддерживаете самостоятельность детей?"
            ).random()
            else -> listOf(
                "Как дела в семье?",
                "Что нового у близких?",
                "Как проводите время с семьей?",
                "Какие семейные традиции цените?",
                "Что радует в семейной жизни?",
                "Как поддерживаете связь с родными?",
                "Какие моменты с семьей запоминаются?",
                "Как семья влияет на вашу жизнь?",
                "Что нового в отношениях с близкими?",
                "Как находите время для семьи?",
                "Что ценного в вашей семье?",
                "Какие планы с семьей на ближайшее время?"
            ).random()
        }
    }

    /**
     * Вопросы на основе фитнеса (ВСЕ ФРАЗЫ СОХРАНЕНЫ) - ОПТИМИЗИРОВАНО
     */
    private fun generateFitnessBasedQuestion(profile: UserProfile): String {
        val calendar = Calendar.getInstance()
        val hour = calendar.get(Calendar.HOUR_OF_DAY)
        return when {
            hour in morningHours -> listOf(
                "Планируете утреннюю тренировку?",
                "Как энергия для занятий?",
                "Какие цели на сегодняшнюю тренировку?",
                "Что вдохновляет на утреннюю активность?",
                "Как спорт влияет на начало дня?",
                "Какие упражнения планируете сегодня?",
                "Как находите мотивацию для утренних тренировок?",
                "Что радует в утренней активности?",
                "Как спорт меняет ваше утро?",
                "Какие привычки создаете через спорт?",
                "Что сложного преодолеваете в тренировках?",
                "Как прогресс в фитнесе радует?"
            ).random()
            hour in 16..20 -> listOf(
                "Удалось позаниматься сегодня?",
                "Как самочувствие после тренировки?",
                "Чувствуете прогресс?",
                "Планируете завтрашнюю тренировку?",
                "Насколько интенсивной была тренировка?",
                "Что вдохновляло на тренировку сегодня?",
                "Какие достижения в спорте радуют?",
                "Как спорт влияет на вечернее настроение?",
                "Что нового пробуете в тренировках?",
                "Как находите баланс в нагрузках?",
                "Что ценного в спортивной рутине?",
                "Как фитнес меняет вашу жизнь?"
            ).random()
            else -> listOf(
                "Как ваша физическая активность?",
                "Следите за режимом тренировок?",
                "Что мотивирует заниматься?",
                "Как спорт влияет на качество жизни?",
                "Какие цели в фитнесе ставите?",
                "Что нового узнали о тренировках?",
                "Как находите время для спорта?",
                "Что радует в физической активности?",
                "Как спорт развивает дисциплину?",
                "Что сложного преодолеваете в фитнесе?",
                "Как прогресс мотивирует?",
                "Что ценного приносят тренировки?"
            ).random()
        }
    }

    /**
     * Вопросы на основе целей (ВСЕ ФРАЗЫ СОХРАНЕНЫ) - ОПТИМИЗИРОВАНО
     */
    private fun generateGoalBasedQuestion(mainGoal: String): String {
        return listOf(
            "Как продвигается цель '$mainGoal'?",
            "Что делаете для достижения $mainGoal?",
            "Какие шаги к $mainGoal на этой неделе?",
            "Что вдохновляет в достижении $mainGoal?",
            "Какие препятствия преодолеваете на пути к $mainGoal?",
            "Как $mainGoal меняет вашу жизнь?",
            "Что нового узнали в процессе достижения $mainGoal?",
            "Какие маленькие победы на пути к $mainGoal?",
            "Как поддерживаете мотивацию для $mainGoal?",
            "Что самое интересное в процессе $mainGoal?",
            "Как $mainGoal развивает вас?",
            "Что планируете сделать для $mainGoal в ближайшее время?"
        ).random()
    }

    /**
     * Вопросы на основе музыки (ВСЕ ФРАЗЫ СОХРАНЕНЫ) - ОПТИМИЗИРОВАНО
     */
    private fun generateMusicBasedQuestion(profile: UserProfile): String {
        return listOf(
            "Слушали что-то вдохновляющее из ${profile.musicPreferences}?",
            "Как музыка ${profile.musicPreferences} влияет на настроение?",
            "Открыли новых артистов в жанре ${profile.musicPreferences}?",
            "Что ищете в музыке ${profile.musicPreferences}?",
            "Как ${profile.musicPreferences} сопровождает ваш день?",
            "Есть ли трек, который всегда поднимает настроение?",
            "Как музыка развивает вашу чувствительность?",
            "Что нового узнали о жанре ${profile.musicPreferences}?",
            "Как создаете музыкальную атмосферу?",
            "Что вдохновляет в ${profile.musicPreferences}?",
            "Как музыка влияет на творчество?",
            "Что открыли в музыке недавно?"
        ).random()
    }

    /**
     * Вопросы на основе кулинарии (ВСЕ ФРАЗЫ СОХРАНЕНЫ) - ОПТИМИЗИРОВАНО
     */
    private fun generateFoodBasedQuestion(profile: UserProfile): String {
        return listOf(
            "Готовили что-то особенное недавно?",
            "Пробовали новые блюда из ${profile.favoriteCuisines}?",
            "Что вдохновляет в кулинарии?",
            "Как ${profile.favoriteCuisines} влияют на настроение?",
            "Открыли новые рецепты?",
            "Что любите экспериментировать в готовке?",
            "Как кулинария развивает креативность?",
            "Что нового узнали о ${profile.favoriteCuisines}?",
            "Как создаете кулинарные традиции?",
            "Что радует в процессе готовки?",
            "Как еда влияет на качество жизни?",
            "Что открыли в кулинарии недавно?"
        ).random()
    }

    /**
     * Общие вопросы на основе времени (ВСЕ ФРАЗЫ СОХРАНЕНЫ) - ОПТИМИЗИРОВАНО
     */
    private fun generateTimeBasedQuestion(): String {
        val calendar = Calendar.getInstance()
        val hour = calendar.get(Calendar.HOUR_OF_DAY)
        return when (hour) {
            in morningHours -> listOf(
                "Какие планы на сегодня?",
                "Как настроение с утра?",
                "Что вдохновляет на новый день?",
                "Что сделает этот день особенным?",
                "Какие цели на сегодня?",
                "Что радует с самого утра?",
                "Как начинаете свой день?",
                "Что мотивирует сегодня?",
                "Какие маленькие радости планируете?",
                "Что нового хотите попробовать сегодня?",
                "Как создаете хорошее настроение?",
                "Что вдохновляет на достижения?"
            ).random()
            in dayHours -> listOf(
                "Как проходит день?",
                "Что интересного происходит?",
                "Какие задачи решаете?",
                "Что радует в течение дня?",
                "Какие открытия сделали сегодня?",
                "Как находите вдохновение днем?",
                "Что делает день продуктивным?",
                "Какие моменты запоминаются?",
                "Как поддерживаете энергию?",
                "Что планируете на вторую половину дня?",
                "Что нового узнали сегодня?",
                "Как день влияет на настроение?"
            ).random()
            in eveningHours -> listOf(
                "Как прошел день?",
                "Что было самым запоминающимся?",
                "Какие планы на вечер?",
                "Что хорошего случилось сегодня?",
                "Какие уроки извлекли из дня?",
                "Как отдыхаете после дня?",
                "Что вдохновило сегодня?",
                "Какие достижения порадовали?",
                "Как подводите итоги дня?",
                "Что планируете на завтра?",
                "Что ценного принес сегодняшний день?",
                "Как вечер влияет на размышления?"
            ).random()
            else -> listOf(
                "О чем думаете?",
                "Что важно для вас сейчас?",
                "Какие мысли занимают?",
                "Что вдохновляет в ночной тишине?",
                "О чем мечтаете?",
                "Какие планы строите?",
                "Что ценного в ночных размышлениях?",
                "Как находите покой ночью?",
                "О чем размышляете перед сном?",
                "Что открыли для себя недавно?",
                "Как ночь влияет на творчество?",
                "Что мотивирует на новые начинания?"
            ).random()
        }
    }

    /**
     * Часть 3: Вопрос на основе истории диалогов - ОПТИМИЗИРОВАНО
     */
    private fun generateContextBasedQuestion(deepContext: DeepConversationContext): String {
        // Приоритет 1: Продолжение активных тем
        deepContext.activeTopics.firstOrNull()?.let { topic ->
            if (topic.weight > 0.7) {
                return generateTopicContinuation(topic)
            }
        }
        // Приоритет 2: Незавершенные обсуждения
        deepContext.pendingDiscussions.firstOrNull()?.let { discussion ->
            return generatePendingContinuation(discussion)
        }
        // Приоритет 3: Эмоциональный контекст
        if (deepContext.emotionalState.emotionalScore != 0.0) {
            return generateEmotionalFollowUp(deepContext.emotionalState)
        }
        // Приоритет 4: Временной контекст + интересы
        return generateSmartContextQuestion(deepContext)
    }

    private fun generateTopicContinuation(topic: ActiveTopic): String {
        return when (topic.name) {
            "работа" -> listOf(
                "Как продвигаются рабочие задачи?",
                "Есть новости по проектам?",
                "Как атмосфера в коллективе?",
                "Что вдохновляет в работе?",
                "Какие вызовы на работе?",
                "Как развиваете профессиональные навыки?",
                "Что нового в рабочей рутине?",
                "Как находите баланс в работе?",
                "Что радует в профессиональной деятельности?",
                "Какие цели на работе?",
                "Как работа влияет на жизнь?",
                "Что планируете в карьере?"
            ).random()
            "семья" -> listOf(
                "Как дела у семьи?",
                "Что нового у близких?",
                "Удалось провести время с семьей?",
                "Какие моменты с семьей ценны?",
                "Как семья поддерживает?",
                "Что радует в семейных отношениях?",
                "Какие традиции создаете?",
                "Как находите время для семьи?",
                "Что нового в семейной жизни?",
                "Как семья вдохновляет?",
                "Какие планы с семьей?",
                "Что ценного в вашей семье?"
            ).random()
            "здоровье" -> listOf(
                "Как самочувствие?",
                "Следите за здоровьем?",
                "Есть улучшения?",
                "Что делает для здоровья?",
                "Как здоровье влияет на настроение?",
                "Какие привычки здоровья развиваете?",
                "Что нового узнали о здоровье?",
                "Как находите мотивацию для заботы о себе?",
                "Что радует в самочувствии?",
                "Как здоровье меняет жизнь?",
                "Какие цели по здоровью?",
                "Что вдохновляет на здоровый образ жизни?"
            ).random()
            "хобби" -> listOf(
                "Удалось позаниматься хобби?",
                "Что нового в увлечениях?",
                "Как прогресс в хобби?",
                "Что вдохновляет в хобби?",
                "Как хобби развивает?",
                "Что нового открыли в увлечениях?",
                "Какие цели в хобби?",
                "Как хобби влияет на жизнь?",
                "Что радует в занятиях?",
                "Как находите время для хобби?",
                "Что сложного в хобби?",
                "Как хобби вдохновляет?"
            ).random()
            else -> listOf(
                "Что нового по теме ${topic.name}?",
                "Как продвигается ${topic.name}?",
                "Есть развитие в ${topic.name}?",
                "Что вдохновляет в ${topic.name}?",
                "Какие цели в ${topic.name}?",
                "Как ${topic.name} влияет на жизнь?",
                "Что нового узнали о ${topic.name}?",
                "Что радует в ${topic.name}?",
                "Какие вызовы в ${topic.name}?",
                "Как развиваете ${topic.name}?",
                "Что планируете в ${topic.name}?",
                "Как ${topic.name} меняет вас?"
            ).random()
        }
    }

    private fun generatePendingContinuation(discussion: PendingDiscussion): String {
        return when (discussion.type) {
            "natural_continuation" -> listOf(
                "Хотели вернуться к теме ${discussion.topic}?",
                "Готовы обсудить ${discussion.topic}?",
                "Что изменилось в ${discussion.topic}?",
                "Как продвигается ${discussion.topic}?",
                "Что нового в ${discussion.topic}?",
                "Какие мысли по ${discussion.topic}?",
                "Что вдохновляет в ${discussion.topic}?",
                "Какие планы по ${discussion.topic}?",
                "Как развивается ${discussion.topic}?",
                "Что радует в ${discussion.topic}?",
                "Какие вызовы в ${discussion.topic}?",
                "Что открыли в ${discussion.topic}?"
            ).random()
            "unanswered_question" -> listOf(
                "Вернемся к вашему вопросу?",
                "Хотите обсудить это подробнее?",
                "Остались ли непонятные моменты?",
                "Что думаете по этому поводу?",
                "Какие новые мысли появились?",
                "Хотите углубиться в тему?",
                "Что интересует в этом вопросе?",
                "Какие аспекты хотите обсудить?",
                "Что нового узнали по теме?",
                "Как изменилось понимание?",
                "Что вдохновило в обсуждении?",
                "Какие вопросы остались?"
            ).random()
            else -> "Продолжим наши обсуждения?"
        }
    }

    private fun generateEmotionalFollowUp(emotionalState: EmotionalState): String {
        return when {
            emotionalState.emotionalScore > 0.5 -> listOf(
                "Что вызывает такую позитивную энергию?",
                "Чем таким хорошим поделитесь?",
                "Что вдохновляет сегодня?",
                "Что делает вас счастливым?",
                "Какие моменты радуют?",
                "Что мотивирует на позитив?",
                "Как создаете хорошее настроение?",
                "Что вдохновляет на улыбки?",
                "Какие достижения радуют?",
                "Что делает день особенным?",
                "Как находите радость в мелочах?",
                "Что заряжает позитивом?"
            ).random()
            emotionalState.emotionalScore < -0.5 -> listOf(
                "Хотите рассказать, что беспокоит?",
                "Как я могу помочь?",
                "Что могло бы улучшить настроение?",
                "Что поддерживает в трудные моменты?",
                "Как находите силы?",
                "Что помогает справляться?",
                "Какие ресурсы используете?",
                "Что приносит утешение?",
                "Как заботитесь о себе?",
                "Что помогает отвлечься?",
                "Какие мысли поддерживают?",
                "Что дает надежду?"
            ).random()
            else -> generateTimeContextQuestion()
        }
    }

    private fun generateSmartContextQuestion(deepContext: DeepConversationContext): String {
        val timeContext = deepContext.timeContext
        val userInterests = deepContext.userInterests
        val baseQuestions = when (timeContext.timeOfDay) {
            "morning" -> listOf(
                "Какие планы на сегодня?",
                "Как настроение с утра?",
                "Что вдохновляет на новый день?",
                "Что сделает этот день успешным?",
                "Какие цели ставите?",
                "Что мотивирует сегодня?",
                "Как начинаете день с удовольствием?",
                "Что радует с утра?",
                "Какие привычки создаете?",
                "Что нового попробуете сегодня?",
                "Как создаете продуктивное настроение?",
                "Что вдохновляет на достижения?"
            )
            "day" -> listOf(
                "Как проходит день?",
                "Что интересного происходит?",
                "Какие задачи решаете?",
                "Что делает день продуктивным?",
                "Какие открытия делаете?",
                "Как находите вдохновение?",
                "Что радует в течение дня?",
                "Какие моменты запоминаются?",
                "Как поддерживаете энергию?",
                "Что нового узнаете?",
                "Как день влияет на настроение?",
                "Что планируете на вечер?"
            )
            "evening" -> listOf(
                "Как прошел день?",
                "Что было самым запоминающимся?",
                "Какие планы на вечер?",
                "Что хорошего случилось сегодня?",
                "Какие уроки извлекли?",
                "Как отдыхаете после дня?",
                "Что вдохновило сегодня?",
                "Какие достижения порадовали?",
                "Как подводите итоги дня?",
                "Что планируете на завтра?",
                "Что ценного принес день?",
                "Как вечер влияет на размышления?"
            )
            else -> listOf(
                "О чем думаете?",
                "Что важно для вас сейчас?",
                "Какие мысли занимают?",
                "Что вдохновляет в тишине?",
                "О чем мечтаете?",
                "Какие планы строите?",
                "Что ценного в размышлениях?",
                "Как находите покой?",
                "О чем размышляете?",
                "Что открыли для себя?",
                "Как ночь влияет на творчество?",
                "Что мотивирует на новые начинания?"
            )
        }
        // Добавляем персонализацию если есть интересы
        userInterests.firstOrNull()?.let { interest ->
            if (random.nextBoolean()) {
                return when (interest.name) {
                    "искусство" -> "Находите время для творчества?"
                    "технологии" -> "Следите за технологическими новинками?"
                    "спорт" -> "Удается поддерживать активность?"
                    "образование" -> "Чему учитесь в последнее время?"
                    "путешествия" -> "Мечтаете о новых поездках?"
                    "музыка" -> "Слушали что-то вдохновляющее?"
                    "кулинария" -> "Готовили что-то интересное?"
                    "чтение" -> "Что читаете в последнее время?"
                    else -> "Что нового в ${interest.name}?"
                }
            }
        }
        return baseQuestions.random()
    }

    private fun generateTimeContextQuestion(): String {
        val calendar = Calendar.getInstance()
        val hour = calendar.get(Calendar.HOUR_OF_DAY)
        return when (hour) {
            in morningHours -> "Какие планы на сегодня?"
            in dayHours -> "Как проходит день?"
            in eveningHours -> "Как прошел день?"
            else -> "О чем думаете перед сном?"
        }
    }

    private suspend fun getCurrentUserName(): String = withContext(Dispatchers.IO) {
        return@withContext try {
            val sharedPref = context.getSharedPreferences("user_prefs", Context.MODE_PRIVATE)
            sharedPref.getString("first_name", "Пользователь") ?: "Пользователь"
        } catch (e: Exception) {
            "Пользователь"
        }
    }

    /**
     * Генерирует приветственную фразу для перехода в чат - ОПТИМИЗИРОВАНО
     */
    suspend fun generateWelcomePhraseForChat(): Pair<String, String> = withContext(Dispatchers.IO) {
        val completeGreeting = generateCompleteGreeting()
        Pair(completeGreeting.first, completeGreeting.third)
    }

    /**
     * Обновляет профиль пользователя (при изменении анкеты) - ОПТИМИЗИРОВАНО
     */
    fun updateUserProfile(newProfile: UserProfile?) {
        cachedCompleteGreeting = null
        lastGreetingGenerationTime = 0
    }

    /**
     * Очищает кэш (для случаев смены пользователя и т.д.) - ОПТИМИЗИРОВАНО
     */
    fun clearCache() {
        cachedCompleteGreeting = null
        lastGreetingGenerationTime = 0
    }
}