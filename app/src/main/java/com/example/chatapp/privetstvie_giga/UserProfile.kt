package com.example.chatapp.privetstvie_giga

import java.util.*

data class UserProfile(
    val userId: String = "",
    val createdAt: Long = System.currentTimeMillis(),
    val lastUpdated: Long = System.currentTimeMillis(),

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    var gender: String = "",
    var birthYear: Int = 0,

    // –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    var relationshipStatus: String = "",

    // –ü—Ä–æ—Ñ–µ—Å—Å–∏—è
    var occupation: String = "",
    var jobTitle: String = "",
    var workSchedule: String = "",
    var workStartTime: String = "",
    var workEndTime: String = "",

    // –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
    var hobbies: String = "", // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ String
    var interests: String = "", // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ String
    var sports: String = "", // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ String

    // –ü—Ä–∏–≤—ã—á–∫–∏
    var wakeUpTime: String = "",
    var sleepQuality: String = "",
    var workoutFrequency: String = "",
    var readingHabit: String = "",
    var workoutTypes: String = "", // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ String

    // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    var musicPreferences: String = "",
    var movieGenres: String = "",
    var foodPreferences: String = "",
    var favoriteSeasons: String = "",
    var favoriteCuisines: String = "", // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ String

    // –¶–µ–ª–∏
    var currentGoals: String = "", // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ String
    var learningInterests: String = "", // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ String

    // –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    var personalityType: String = "",
    var communicationStyle: String = "",
    var stressManagement: String = "",
    var socialActivity: String = "",
    var learningStyle: String = "",

    // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    var city: String = "",
    var dailyCommuteTime: Int = 0,

    // –°–µ–º—å—è –∏ –¥–æ–º–∞—à–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
    var hasChildren: Boolean = false,
    var childrenAges: String = "", // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ String
    var hasPets: Boolean = false,
    var petTypes: String = "",

    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —É–º–Ω–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    var fitnessLevel: String = "",
    var travelFrequency: String = "",
    var cookingHabit: String = "",
    var weekendActivities: String = "" // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ String
) {
    fun isProfileComplete(): Boolean {
        return gender.isNotEmpty() &&
                relationshipStatus.isNotEmpty() &&
                occupation.isNotEmpty() &&
                workSchedule.isNotEmpty()
    }

    fun getAge(): Int {
        return if (birthYear > 0) {
            Calendar.getInstance().get(Calendar.YEAR) - birthYear
        } else 0
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ —Å–ø–∏—Å–∫–∏
    fun getHobbiesList(): List<String> {
        return hobbies.split(",").map { it.trim() }.filter { it.isNotEmpty() }
    }

    fun getInterestsList(): List<String> {
        return interests.split(",").map { it.trim() }.filter { it.isNotEmpty() }
    }

    fun getSportsList(): List<String> {
        return sports.split(",").map { it.trim() }.filter { it.isNotEmpty() }
    }

    fun getWorkoutTypesList(): List<String> {
        return workoutTypes.split(",").map { it.trim() }.filter { it.isNotEmpty() }
    }

    fun getFavoriteCuisinesList(): List<String> {
        return favoriteCuisines.split(",").map { it.trim() }.filter { it.isNotEmpty() }
    }

    fun getCurrentGoalsList(): List<String> {
        return currentGoals.split(",").map { it.trim() }.filter { it.isNotEmpty() }
    }

    fun getLearningInterestsList(): List<String> {
        return learningInterests.split(",").map { it.trim() }.filter { it.isNotEmpty() }
    }

    fun getChildrenAgesList(): List<Int> {
        return childrenAges.split(",").mapNotNull { it.trim().toIntOrNull() }.filter { it > 0 }
    }

    fun getWeekendActivitiesList(): List<String> {
        return weekendActivities.split(",").map { it.trim() }.filter { it.isNotEmpty() }
    }

    // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    fun getPersonalizedGreeting(): String {
        val calendar = Calendar.getInstance()
        val hour = calendar.get(Calendar.HOUR_OF_DAY)

        val greeting = when (hour) {
            in 5..11 -> "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
            in 12..17 -> "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
            in 18..23 -> "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
            else -> "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
        }

        return when {
            personalityType.isNotEmpty() && communicationStyle.isNotEmpty() ->
                "$greeting! –ö–∞–∫ ${getPersonalityBasedQuestion()}"
            hobbies.isNotEmpty() ->
                "$greeting! –ö–∞–∫ –≤–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è ${getHobbiesList().firstOrNull()}?"
            occupation.isNotEmpty() ->
                "$greeting! –ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –≤ —Å—Ñ–µ—Ä–µ $occupation?"
            else -> "$greeting! –ö–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?"
        }
    }

    private fun getPersonalityBasedQuestion(): String {
        return when (personalityType.lowercase()) {
            "–∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç" -> "–ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞—à —Å–ø–æ–∫–æ–π–Ω—ã–π –¥–µ–Ω—å?"
            "—ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç" -> "–≤–∞—à–µ –æ–±—â–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?"
            "–∞–º–±–∏–≤–µ—Ä—Ç" -> "–≤–∞—à —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–Ω—å?"
            else -> "–≤–∞—à –¥–µ–Ω—å?"
        }
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    fun getRecommendedCommunicationStyle(): String {
        return when (communicationStyle.lowercase()) {
            "—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π" -> "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            "—é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π" -> "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø–æ—à—É—Ç–∏—Ç—å –∏ –ø–æ–º–æ—á—å! üòÑ"
            "—Å–µ—Ä—å–µ–∑–Ω—ã–π" -> "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"
            else -> "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        }
    }

    fun getTopicsForDiscussion(): List<String> {
        val topics = mutableListOf<String>()

        if (hobbies.isNotEmpty()) topics.addAll(getHobbiesList())
        if (interests.isNotEmpty()) topics.addAll(getInterestsList())
        if (musicPreferences.isNotEmpty()) topics.add("–ú—É–∑—ã–∫–∞: $musicPreferences")
        if (movieGenres.isNotEmpty()) topics.add("–ö–∏–Ω–æ: $movieGenres")
        if (learningInterests.isNotEmpty()) topics.addAll(getLearningInterestsList())

        return topics.distinct()
    }

    // –£–º–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    fun getContextualGreeting(): String {
        val calendar = Calendar.getInstance()
        val hour = calendar.get(Calendar.HOUR_OF_DAY)
        val isWeekend = calendar.get(Calendar.DAY_OF_WEEK) in listOf(Calendar.SATURDAY, Calendar.SUNDAY)

        val greeting = when (hour) {
            in 5..11 -> "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
            in 12..17 -> "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
            in 18..23 -> "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
            else -> "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
        }

        val contextualPart = when {
            // –£—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            hour in 5..11 -> when {
                hasChildren && !isWeekend -> "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –¥–Ω–µ–º? –î–µ—Ç–∏ –≥–æ—Ç–æ–≤—ã –∫ —à–∫–æ–ª–µ?"
                hasChildren && isWeekend -> "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —É—Ç—Ä–æ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è! –ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã —Å —Å–µ–º—å–µ–π?"
                fitnessLevel.isNotEmpty() -> "–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º? –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?"
                workStartTime.isNotEmpty() && !isWeekend -> "–°–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É? –ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å?"
                else -> "–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?"
            }
            // –í–µ—á–µ—Ä–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            hour in 18..23 -> when {
                hasChildren -> "–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å? –î–µ—Ç–∏ —É–∂–µ —Å–ø—è—Ç?"
                fitnessLevel.isNotEmpty() -> "–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å? –£–¥–∞–ª–æ—Å—å –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è?"
                workEndTime.isNotEmpty() && !isWeekend -> "–û—Ç–¥–æ—Ö–Ω—É–ª–∏ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã? –°–ª–æ–∂–Ω—ã–π –±—ã–ª –¥–µ–Ω—å?"
                else -> "–ö–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å?"
            }
            // –î–Ω–µ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            else -> when {
                hasChildren && hour in 15..17 -> "–ö–∞–∫ –¥–µ–Ω—å? –î–µ—Ç–∏ —É–∂–µ –¥–æ–º–∞ –∏–∑ —à–∫–æ–ª—ã?"
                fitnessLevel.isNotEmpty() && hour in 14..16 -> "–ï—Å—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? –ö–∞–∫ —ç–Ω–µ—Ä–≥–∏—è?"
                else -> "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞—à –¥–µ–Ω—å?"
            }
        }

        return "$greeting! $contextualPart"
    }

    // –£—Ç—Ä–µ–Ω–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    fun getMorningQuestions(): List<String> {
        val questions = mutableListOf<String>()
        val calendar = Calendar.getInstance()
        val hour = calendar.get(Calendar.HOUR_OF_DAY)
        val isWeekend = calendar.get(Calendar.DAY_OF_WEEK) in listOf(Calendar.SATURDAY, Calendar.SUNDAY)

        // –ë–∞–∑–æ–≤—ã–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        questions.addAll(listOf(
            "–ö–∞–∫ –≤—ã —Å–ø–∞–ª–∏? –í—ã—Å–ø–∞–ª–∏—Å—å?",
            "–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?",
            "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å —É—Ç—Ä–∞?",
            "–ß—Ç–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫?",
            "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞ –æ–∫–Ω–æ–º?"
        ))

        // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        if (hasChildren) {
            val childQuestions = when {
                getChildrenAgesList().any { it in 0..3 } -> listOf(
                    "–ö–∞–∫ —Å–ø–∞–ª –º–∞–ª—ã—à?",
                    "–£–¥–∞–ª–æ—Å—å –≤—ã—Å–ø–∞—Ç—å—Å—è —Å —Ä–µ–±–µ–Ω–∫–æ–º?",
                    "–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã —Å —Ä–µ–±–µ–Ω–∫–æ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?",
                    "–í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è —Ä–µ–±–µ–Ω–æ–∫?"
                )
                getChildrenAgesList().any { it in 4..12 } -> listOf(
                    "–î–µ—Ç–∏ —Å–æ–±—Ä–∞–ª–∏—Å—å –≤ —à–∫–æ–ª—É/—Å–∞–¥?",
                    "–£—Å–ø–µ–ª–∏ –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å —Å –¥–µ—Ç—å–º–∏?",
                    "–ö—Ç–æ –æ—Ç–≤–æ–¥–∏—Ç –¥–µ—Ç–µ–π —Å–µ–≥–æ–¥–Ω—è?",
                    "–í—Å–µ –ª–∏ —Å–æ–±—Ä–∞–ª–∏ –¥–µ—Ç–∏ –≤ —à–∫–æ–ª—É?"
                )
                getChildrenAgesList().any { it in 13..18 } -> listOf(
                    "–ü–æ–¥—Ä–æ—Å—Ç–∫–∏ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å?",
                    "–ö–∞–∫ —É—Å–ø–µ—Ö–∏ –¥–µ—Ç–µ–π –≤ —à–∫–æ–ª–µ?",
                    "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —á—Ç–æ-—Ç–æ —Å –¥–µ—Ç—å–º–∏ –Ω–∞ –≤–µ—á–µ—Ä?",
                    "–ï—Å—Ç—å –ª–∏ —É –¥–µ—Ç–µ–π –≤–∞–∂–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è?"
                )
                else -> emptyList()
            }
            questions.addAll(childQuestions)
        }

        // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤
        if (fitnessLevel.isNotEmpty()) {
            val workoutQuestions = when (fitnessLevel.lowercase()) {
                "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" -> listOf(
                    "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—Ç—Ä–µ–Ω–Ω—é—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
                    "–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
                    "–ö–∞–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π?",
                    "–ù–∞–¥ –∫–∞–∫–∏–º–∏ –º—ã—à—Ü–∞–º–∏ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?"
                )
                "–ª—é–±–∏—Ç–µ–ª—å" -> listOf(
                    "–ë—É–¥–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?",
                    "–ö–∞–∫–æ–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?",
                    "–ù—É–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?",
                    "–ö–∞–∫–æ–π –≤–µ—Å/–¥–∏—Å—Ç–∞–Ω—Ü–∏—è —Å–µ–≥–æ–¥–Ω—è?"
                )
                else -> listOf(
                    "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–∑–º—è—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?",
                    "–ú–æ–∂–µ—Ç, —Å–¥–µ–ª–∞–µ—Ç–µ —É—Ç—Ä–µ–Ω–Ω—é—é –∑–∞—Ä—è–¥–∫—É?",
                    "–ö–∞–∫ –Ω–∞—Å—á–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–≥—É–ª–∫–∏?",
                    "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –±–æ–¥—Ä–æ —Å —É—Ç—Ä–∞?"
                )
            }
            questions.addAll(workoutQuestions)
        }

        // –í–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ
        if (workStartTime.isNotEmpty() && !isWeekend) {
            questions.addAll(listOf(
                "–°–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É?",
                "–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?",
                "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ?",
                "–ü—Ä–µ–¥—Å—Ç–æ—è—Ç –ª–∏ –≤–∞–∂–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏?"
            ))
        }

        // –í–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–æ–º—Ü–∞—Ö
        if (hasPets) {
            questions.addAll(listOf(
                "–ö–∞–∫ –≤–∞—à ${if (petTypes.isNotEmpty()) petTypes.split(",").firstOrNull() else "–ø–∏—Ç–æ–º–µ—Ü"}?",
                "–£—Å–ø–µ–ª–∏ –ø–æ–≥—É–ª—è—Ç—å —Å –ø–∏—Ç–æ–º—Ü–µ–º?",
                "–ü–æ–∫–æ—Ä–º–∏–ª–∏ ${if (petTypes.isNotEmpty()) petTypes.split(",").firstOrNull() else "–ø–∏—Ç–æ–º—Ü–∞"}?",
                "–ö–∞–∫ —Å–ø–∞–ª –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü?"
            ))
        }

        // –í–æ–ø—Ä–æ—Å—ã –æ –≥–æ—Ç–æ–≤–∫–µ
        if (cookingHabit == "—á–∞—Å—Ç–æ") {
            questions.addAll(listOf(
                "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
                "–ë—É–¥–µ—Ç–µ –ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã?",
                "–ù—É–∂–Ω—ã –ª–∏ –∏–¥–µ–∏ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞?"
            ))
        }

        return questions.distinct()
    }

    // –í–µ—á–µ—Ä–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    fun getEveningQuestions(): List<String> {
        val questions = mutableListOf<String>()
        val isWeekend = Calendar.getInstance().get(Calendar.DAY_OF_WEEK) in listOf(Calendar.SATURDAY, Calendar.SUNDAY)

        // –ë–∞–∑–æ–≤—ã–µ –≤–µ—á–µ—Ä–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        questions.addAll(listOf(
            "–ö–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å?",
            "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–æ?",
            "–£—Å—Ç–∞–ª–∏ –ø–æ—Å–ª–µ –¥–Ω—è?",
            "–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä?",
            "–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º?"
        ))

        // –í–æ–ø—Ä–æ—Å—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –≤–µ—á–µ—Ä–æ–º
        if (fitnessLevel.isNotEmpty() && workoutTypes.isNotEmpty()) {
            val eveningWorkoutQuestions = when (fitnessLevel.lowercase()) {
                "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" -> listOf(
                    "–ö–∞–∫ –ø—Ä–æ—à–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞? –î–æ–≤–æ–ª—å–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º?",
                    "–£–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π?",
                    "–ö–∞–∫–∏–µ –º—ã—à—Ü—ã —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–ª–∏?",
                    "–ö–∞–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?",
                    "–ö–∞–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è?"
                )
                "–ª—é–±–∏—Ç–µ–ª—å" -> listOf(
                    "–£–¥–∞–ª–æ—Å—å –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?",
                    "–ö–∞–∫ –ø—Ä–æ—à–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?",
                    "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å?",
                    "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
                    "–ù–∞—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –±—ã–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?"
                )
                else -> listOf(
                    "–£–¥–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–≤–∏–≥–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?",
                    "–ö–∞–∫ –Ω–∞—Å—á–µ—Ç –ª–µ–≥–∫–æ–π –≤–µ—á–µ—Ä–Ω–µ–π –ø—Ä–æ–≥—É–ª–∫–∏?",
                    "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –±–æ–¥—Ä–µ–µ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?",
                    "–ü–æ–ª—É—á–∏–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É?"
                )
            }
            questions.addAll(eveningWorkoutQuestions)
        }

        // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≤–µ—á–µ—Ä–æ–º
        if (hasChildren) {
            val eveningChildQuestions = when {
                getChildrenAgesList().any { it in 0..3 } -> listOf(
                    "–ö–∞–∫ –º–∞–ª—ã—à? –£–ª–æ–∂–∏–ª–∏ —Å–ø–∞—Ç—å?",
                    "–£–¥–∞–ª–æ—Å—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –ø–æ–∫–∞ —Ä–µ–±–µ–Ω–æ–∫ —Å–ø–∏—Ç?",
                    "–ö–∞–∫–∏–º –±—ã–ª –¥–µ–Ω—å —Å —Ä–µ–±–µ–Ω–∫–æ–º?",
                    "–ö–∞–∫–∏–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞/–Ω–∞–≤—ã–∫–∏ —É —Ä–µ–±–µ–Ω–∫–∞?"
                )
                getChildrenAgesList().any { it in 4..12 } -> listOf(
                    "–î–µ—Ç–∏ —Å–¥–µ–ª–∞–ª–∏ —É—Ä–æ–∫–∏?",
                    "–í–æ —Å–∫–æ–ª—å–∫–æ —É–ª–æ–∂–∏–ª–∏ –¥–µ—Ç–µ–π —Å–ø–∞—Ç—å?",
                    "–ö–∞–∫ —É—Å–ø–µ—Ö–∏ –¥–µ—Ç–µ–π —Å–µ–≥–æ–¥–Ω—è?",
                    "–ß–µ–º –∑–∞–Ω–∏–º–∞–ª–∏—Å—å –¥–µ—Ç–∏ –ø–æ—Å–ª–µ —à–∫–æ–ª—ã?"
                )
                getChildrenAgesList().any { it in 13..18 } -> listOf(
                    "–ö–∞–∫ –ø–æ–¥—Ä–æ—Å—Ç–∫–∏? –ß–µ–º –∑–∞–Ω–∏–º–∞–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è?",
                    "–£–¥–∞–ª–æ—Å—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –¥–µ—Ç—å–º–∏?",
                    "–ö–∞–∫–∏–µ —É –Ω–∏—Ö –ø–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞?",
                    "–ï—Å—Ç—å –ª–∏ —É –Ω–∏—Ö –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è?"
                )
                else -> emptyList()
            }
            questions.addAll(eveningChildQuestions)
        }

        // –í–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ –≤–µ—á–µ—Ä–æ–º
        if (workEndTime.isNotEmpty() && !isWeekend) {
            questions.addAll(listOf(
                "–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?",
                "–£—Å–ø–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏?",
                "–û—Ç–¥–æ—Ö–Ω—É–ª–∏ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã?",
                "–°–ª–æ–∂–Ω—ã–π –±—ã–ª –¥–µ–Ω—å?",
                "–ß—Ç–æ –±—ã–ª–æ —Å–∞–º—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –Ω–∞ —Ä–∞–±–æ—Ç–µ?"
            ))
        }

        // –í–æ–ø—Ä–æ—Å—ã –æ –≥–æ—Ç–æ–≤–∫–µ –≤–µ—á–µ—Ä–æ–º
        if (cookingHabit.isNotEmpty()) {
            questions.addAll(listOf(
                "–ß—Ç–æ –≥–æ—Ç–æ–≤–∏–ª–∏ –Ω–∞ —É–∂–∏–Ω?",
                "–£–¥–∞–ª–æ—Å—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ?",
                "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –Ω–∞ —É–∂–∏–Ω?",
                "–ö–∞–∫–æ–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å–µ–≥–æ–¥–Ω—è?"
            ))
        }

        // –í–æ–ø—Ä–æ—Å—ã –æ –≤—ã—Ö–æ–¥–Ω—ã—Ö
        if (isWeekend) {
            questions.addAll(listOf(
                "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤—ã—Ö–æ–¥–Ω–æ–π?",
                "–£–¥–∞–ª–æ—Å—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å?",
                "–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–π—Å—è –≤—ã—Ö–æ–¥–Ω—ã–π?",
                "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Å–¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è?"
            ))
        }

        return questions.distinct()
    }

    // –í–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    fun getInterestBasedQuestions(): List<String> {
        val questions = mutableListOf<String>()

        // –í–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–æ–±–±–∏
        getHobbiesList().forEach { hobby ->
            when (hobby.lowercase()) {
                "—á—Ç–µ–Ω–∏–µ", "–∫–Ω–∏–≥–∏" -> questions.addAll(listOf(
                    "–ß—Ç–æ —Å–µ–π—á–∞—Å —á–∏—Ç–∞–µ—Ç–µ?",
                    "–û—Ç–∫—Ä—ã–ª–∏ –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏?",
                    "–ö–∞–∫–æ–π –∂–∞–Ω—Ä —Å–µ–π—á–∞—Å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
                    "–ö–∞–∫–∞—è –∫–Ω–∏–≥–∞ –ø—Ä–æ–∏–∑–≤–µ–ª–∞ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ?"
                ))
                "–º—É–∑—ã–∫–∞" -> questions.addAll(listOf(
                    "–ö–∞–∫—É—é –º—É–∑—ã–∫—É —Å–ª—É—à–∞–µ—Ç–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?",
                    "–û—Ç–∫—Ä—ã–ª–∏ –Ω–æ–≤—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π?",
                    "–ü–æ—Å–µ—â–∞–ª–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã?",
                    "–ï—Å—Ç—å –ª—é–±–∏–º—ã–π –ø–ª–µ–π–ª–∏—Å—Ç?"
                ))
                "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è" -> questions.addAll(listOf(
                    "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–µ–∑–¥–∫–∏?",
                    "–í—Å–ø–æ–º–∏–Ω–∞–µ—Ç–µ –Ω–µ–¥–∞–≤–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è?",
                    "–ö–∞–∫–∏–µ –º–µ—Å—Ç–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å?",
                    "–ö–∞–∫–æ–π –±—ã–ª —Å–∞–º—ã–π –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è –æ—Ç–ø—É—Å–∫?"
                ))
                "–∫–∏–Ω–æ", "—Ñ–∏–ª—å–º—ã" -> questions.addAll(listOf(
                    "–°–º–æ—Ç—Ä–µ–ª–∏ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ?",
                    "–ñ–¥–µ—Ç–µ –≤—ã—Ö–æ–¥–∞ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤?",
                    "–ö–∞–∫–æ–π –∂–∞–Ω—Ä —Å–µ–π—á–∞—Å –Ω—Ä–∞–≤–∏—Ç—Å—è?",
                    "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –ø–æ—Å–æ–≤–µ—Ç—É–µ—Ç–µ?"
                ))
                "–∫—É–ª–∏–Ω–∞—Ä–∏—è", "–≥–æ—Ç–æ–≤–∫–∞" -> questions.addAll(listOf(
                    "–ü—Ä–æ–±–æ–≤–∞–ª–∏ –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã?",
                    "–ö–∞–∫–∏–µ –±–ª—é–¥–∞ —Å–µ–π—á–∞—Å –≥–æ—Ç–æ–≤–∏—Ç–µ?",
                    "–ï—Å—Ç—å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã?",
                    "–ß—Ç–æ –ª—é–±–∏—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"
                ))
                "—Å–ø–æ—Ä—Ç" -> questions.addAll(listOf(
                    "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏?",
                    "–ï—Å—Ç—å –ª—é–±–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã?",
                    "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á–∏?",
                    "–ö–∞–∫–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?"
                ))
                "—Ä–∏—Å–æ–≤–∞–Ω–∏–µ", "–∂–∏–≤–æ–ø–∏—Å—å" -> questions.addAll(listOf(
                    "–†–∏—Å–æ–≤–∞–ª–∏ —á—Ç–æ-—Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?",
                    "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–±—É–µ—Ç–µ?",
                    "–ï—Å—Ç—å –ª—é–±–∏–º—ã–µ —Ö—É–¥–æ–∂–Ω–∏–∫–∏?",
                    "–ß—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –Ω–∞ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ?"
                ))
                "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ" -> questions.addAll(listOf(
                    "–ù–∞–¥ –∫–∞–∫–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?",
                    "–ò–∑—É—á–∞–µ—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏?",
                    "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—Ä–∞–≤–∏—Ç—Å—è?",
                    "–ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏?"
                ))
            }
        }

        // –í–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞
        val currentSeason = getCurrentSeason()
        if (currentSeason in favoriteSeasons) {
            questions.addAll(listOf(
                "–ù—Ä–∞–≤–∏—Ç—Å—è $currentSeason?",
                "–ß–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ –ª—é–±–∏—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è $currentSeason?",
                "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –≤ —ç—Ç–æ—Ç —Å–µ–∑–æ–Ω?",
                "–ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ $currentSeason?"
            ))
        }

        // –í–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        if (musicPreferences.isNotEmpty()) {
            questions.addAll(listOf(
                "–ß–∞—Å—Ç–æ —Å–ª—É—à–∞–µ—Ç–µ $musicPreferences?",
                "–ï—Å—Ç—å –ª—é–±–∏–º—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –≤ —ç—Ç–æ–º –∂–∞–Ω—Ä–µ?",
                "–û—Ç–∫—Ä—ã–ª–∏ –Ω–æ–≤—É—é –º—É–∑—ã–∫—É –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?"
            ))
        }

        return questions.distinct()
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
    fun getTimeContextualQuestions(): List<String> {
        val calendar = Calendar.getInstance()
        val hour = calendar.get(Calendar.HOUR_OF_DAY)
        val isWeekend = calendar.get(Calendar.DAY_OF_WEEK) in listOf(Calendar.SATURDAY, Calendar.SUNDAY)

        val questions = mutableListOf<String>()

        // –£—Ç—Ä–µ–Ω–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã (5-11)
        if (hour in 5..11) {
            questions.addAll(listOf(
                "–ö–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å?",
                "–ß—Ç–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫?",
                "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è?",
                "–£–¥–∞–ª–æ—Å—å –≤—ã—Å–ø–∞—Ç—å—Å—è?"
            ))

            if (!isWeekend && workStartTime.isNotEmpty()) {
                questions.add("–°–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É? –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?")
            }

            if (fitnessLevel.isNotEmpty() && fitnessLevel != "–ù–µ –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º") {
                questions.add("–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—Ç—Ä–µ–Ω–Ω—é—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?")
            }
        }

        // –î–Ω–µ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (12-17)
        if (hour in 12..17) {
            questions.addAll(listOf(
                "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–µ–Ω—å?",
                "–£—Å–ø–µ–ª–∏ –ø–æ–æ–±–µ–¥–∞—Ç—å?",
                "–ï—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ –≤ —Ä–∞–±–æ—Ç–µ?",
                "–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è?"
            ))

            if (fitnessLevel.isNotEmpty() && hour in 14..16) {
                questions.add("–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–Ω–µ–≤–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?")
            }
        }

        // –í–µ—á–µ—Ä–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã (18-23)
        if (hour in 18..23) {
            questions.addAll(listOf(
                "–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å?",
                "–£—Å—Ç–∞–ª–∏ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã?",
                "–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä?",
                "–ß—Ç–æ –±—ã–ª–æ —Å–∞–º—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Å–µ–≥–æ–¥–Ω—è?"
            ))

            if (isWeekend) {
                questions.add("–ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—ã—Ö–æ–¥–Ω–æ–π?")
            }

            if (cookingHabit == "—á–∞—Å—Ç–æ") {
                questions.add("–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞ —É–∂–∏–Ω?")
            }
        }

        // –ù–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (0-4)
        if (hour in 0..4) {
            questions.addAll(listOf(
                "–ü–æ–∑–¥–Ω–æ –∑–∞—Å–∏–¥–µ–ª–∏—Å—å? –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ?",
                "–ù–µ –º–æ–∂–µ—Ç–µ —É—Å–Ω—É—Ç—å?",
                "–†–∞–±–æ—Ç–∞–µ—Ç–µ –∏–ª–∏ –æ—Ç–¥—ã—Ö–∞–µ—Ç–µ?",
                "–ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
            ))
        }

        return questions
    }

    // –°–ª—É—á–∞–π–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    fun getRandomContextualQuestion(): String {
        val allQuestions = mutableListOf<String>()

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        allQuestions.addAll(getTimeContextualQuestions())

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        allQuestions.addAll(getInterestBasedQuestions())

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        allQuestions.addAll(listOf(
            "–ö–∞–∫ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
            "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏?",
            "–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ –≤–∞—Å —Å–µ–π—á–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?",
            "–ö–∞–∫–∏–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ä–∞–¥–æ—Å—Ç–∏ –±—ã–ª–∏ —Å–µ–≥–æ–¥–Ω—è?",
            "–û —á–µ–º –º–µ—á—Ç–∞–µ—Ç–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?",
            "–ß–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–Ω—è—Ç—å—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è?",
            "–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
        ))

        return if (allQuestions.isNotEmpty()) allQuestions.random() else "–ö–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?"
    }

    // –ü—Ä–æ–º–ø—Ç –¥–ª—è AI —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    fun getPersonalizedChatPrompt(): String {
        val prompt = StringBuilder()

        prompt.append("–¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ. –ò—Å–ø–æ–ª—å–∑—É–π –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.\n\n")

        prompt.append("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:\n")

        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (gender.isNotEmpty()) prompt.append("- –ü–æ–ª: $gender\n")
        if (getAge() > 0) prompt.append("- –í–æ–∑—Ä–∞—Å—Ç: ${getAge()} –ª–µ—Ç\n")
        if (relationshipStatus.isNotEmpty()) prompt.append("- –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: $relationshipStatus\n")
        if (city.isNotEmpty()) prompt.append("- –ì–æ—Ä–æ–¥: $city\n")

        // –ü—Ä–æ—Ñ–µ—Å—Å–∏—è
        if (occupation.isNotEmpty()) prompt.append("- –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: $occupation\n")
        if (jobTitle.isNotEmpty()) prompt.append("- –î–æ–ª–∂–Ω–æ—Å—Ç—å: $jobTitle\n")
        if (workSchedule.isNotEmpty()) prompt.append("- –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: $workSchedule\n")

        // –°–µ–º—å—è
        if (hasChildren) {
            prompt.append("- –ï—Å—Ç—å –¥–µ—Ç–∏: –¥–∞\n")
            if (childrenAges.isNotEmpty()) prompt.append("- –í–æ–∑—Ä–∞—Å—Ç –¥–µ—Ç–µ–π: $childrenAges\n")
        }
        if (hasPets) prompt.append("- –ü–∏—Ç–æ–º—Ü—ã: $petTypes\n")

        // –•–æ–±–±–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
        if (hobbies.isNotEmpty()) prompt.append("- –•–æ–±–±–∏: $hobbies\n")
        if (interests.isNotEmpty()) prompt.append("- –ò–Ω—Ç–µ—Ä–µ—Å—ã: $interests\n")
        if (sports.isNotEmpty()) prompt.append("- –°–ø–æ—Ä—Ç: $sports\n")

        // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        if (musicPreferences.isNotEmpty()) prompt.append("- –ú—É–∑—ã–∫–∞: $musicPreferences\n")
        if (movieGenres.isNotEmpty()) prompt.append("- –§–∏–ª—å–º—ã: $movieGenres\n")
        if (foodPreferences.isNotEmpty()) prompt.append("- –ï–¥–∞: $foodPreferences\n")

        // –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if (personalityType.isNotEmpty()) prompt.append("- –¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: $personalityType\n")
        if (communicationStyle.isNotEmpty()) prompt.append("- –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: $communicationStyle\n")
        if (stressManagement.isNotEmpty()) prompt.append("- –°–Ω—è—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–∞: $stressManagement\n")

        // –¶–µ–ª–∏
        if (currentGoals.isNotEmpty()) prompt.append("- –¶–µ–ª–∏: $currentGoals\n")
        if (learningInterests.isNotEmpty()) prompt.append("- –ò–Ω—Ç–µ—Ä–µ—Å—ã –≤ –æ–±—É—á–µ–Ω–∏–∏: $learningInterests\n")

        prompt.append("\n–ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ê–°–°–ò–°–¢–ï–ù–¢–ê:\n")
        prompt.append("1. –£—á–∏—Ç—ã–≤–∞–π –í–°–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ\n")
        prompt.append("2. –ë—É–¥—å ")

        when (communicationStyle.lowercase()) {
            "—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π" -> prompt.append("—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º")
            "—é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π" -> prompt.append("–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∏—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Å—Ç–Ω—ã–π —é–º–æ—Ä")
            "—Å–µ—Ä—å–µ–∑–Ω—ã–π" -> prompt.append("—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω—ã–º –∏ –¥–µ–ª–æ–≤—ã–º")
            "–¥—Ä—É–∂–µ—Å–∫–∏–π" -> prompt.append("–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –æ—Ç–∫—Ä—ã—Ç—ã–º")
            "—ç–º–ø–∞—Ç–∏—á–Ω—ã–π" -> prompt.append("—á—É—Ç–∫–∏–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º")
            else -> prompt.append("–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º")
        }

        prompt.append("\n3. –ó–∞–¥–∞–≤–∞–π —É–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏\n")
        prompt.append("4. –ü—Ä–æ—è–≤–ª—è–π –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –µ–≥–æ –∂–∏–∑–Ω–∏\n")
        prompt.append("5. –£—á–∏—Ç—ã–≤–∞–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ")

        if (workStartTime.isNotEmpty()) prompt.append("—Ä–∞–±–æ—Ç–∞ —Å $workStartTime")
        if (wakeUpTime.isNotEmpty()) prompt.append(", –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è $wakeUpTime")

        prompt.append("\n6. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –±–µ—Å–µ–¥—É –Ω–∞ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n")

        // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (hasChildren) prompt.append("7. –ò–Ω—Ç–µ—Ä–µ—Å—É–π—Å—è –¥–µ—Ç—å–º–∏ –∏ —Å–µ–º–µ–π–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏\n")
        if (fitnessLevel.isNotEmpty() && fitnessLevel != "–ù–µ –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º") {
            prompt.append("8. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –º–æ—Ç–∏–≤–∏—Ä—É–π –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º\n")
        }
        if (occupation.isNotEmpty()) prompt.append("9. –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ñ–µ—Ä—É –≤ —Å–æ–≤–µ—Ç–∞—Ö\n")

        return prompt.toString()
    }

    private fun getCurrentSeason(): String {
        val month = Calendar.getInstance().get(Calendar.MONTH)
        return when (month) {
            in 2..4 -> "–≤–µ—Å–Ω–∞"
            in 5..7 -> "–ª–µ—Ç–æ"
            in 8..10 -> "–æ—Å–µ–Ω—å"
            else -> "–∑–∏–º–∞"
        }
    }
}