package com.example.chatapp.utils

import android.content.Context
import android.os.Handler
import android.util.Log
import com.example.chatapp.NotificationRequest
import com.example.chatapp.api.RetrofitInstance
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

object NotificationUtils {

    private const val TAG = "NotificationUtils"

    // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–∞–Ω–µ–ª–∏ OneSignal
    private const val ONESIGNAL_APP_ID = "0083de8f-7ca0-4824-ac88-9c037278237e"

    // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π REST API Key –∏–∑ OneSignal
    private const val REST_API_KEY = "YOUR_REST_API_KEY_HERE" // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô –ö–õ–Æ–ß!

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç Player ID –≤ Firebase —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    fun saveCurrentUserOneSignalIdToDatabase(context: Context) {
        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid
        if (currentUserId.isNullOrBlank()) {
            Log.w(TAG, "–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å OneSignal ID –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        }

        try {
            // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            Handler().postDelayed({
                getOneSignalIdSafely(currentUserId)
            }, 1000)

        } catch (e: Exception) {
            Log.e(TAG, "Unexpected error while scheduling OneSignal ID save", e)
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ OneSignal ID
     */
    private fun getOneSignalIdSafely(userId: String) {
        try {
            val oneSignalClass = Class.forName("com.onesignal.OneSignal")

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å DeviceState (–¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π OneSignal 4.x)
            try {
                val getDeviceStateMethod = oneSignalClass.getMethod("getDeviceState")
                val deviceState = getDeviceStateMethod.invoke(null)

                if (deviceState != null) {
                    val getUserIdMethod = deviceState.javaClass.getMethod("getUserId")
                    val oneSignalId = getUserIdMethod.invoke(deviceState) as? String

                    if (!oneSignalId.isNullOrEmpty()) {
                        saveIdToFirebase(userId, oneSignalId)
                        return
                    }
                }
            } catch (e1: Exception) {
                Log.d(TAG, "Method getDeviceState failed, trying legacy method")
            }

            // Legacy –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
            try {
                val getPermissionSubscriptionStateMethod = oneSignalClass.getMethod("getPermissionSubscriptionState")
                val permissionState = getPermissionSubscriptionStateMethod.invoke(null)

                if (permissionState != null) {
                    val getSubscriptionStatusMethod = permissionState.javaClass.getMethod("getSubscriptionStatus")
                    val subscriptionStatus = getSubscriptionStatusMethod.invoke(permissionState)

                    if (subscriptionStatus != null) {
                        val getUserIdMethod = subscriptionStatus.javaClass.getMethod("getUserId")
                        val oneSignalId = getUserIdMethod.invoke(subscriptionStatus) as? String

                        if (!oneSignalId.isNullOrEmpty()) {
                            saveIdToFirebase(userId, oneSignalId)
                            return
                        }
                    }
                }
            } catch (e2: Exception) {
                Log.e(TAG, "Both OneSignal ID methods failed", e2)
            }

            Log.w(TAG, "Could not retrieve OneSignal ID for user $userId")

        } catch (e: ClassNotFoundException) {
            Log.e(TAG, "OneSignal SDK not found", e)
        } catch (e: Exception) {
            Log.e(TAG, "Unexpected error while getting OneSignal ID", e)
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π OneSignal ID –≤ Firebase —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
     */
    private fun saveIdToFirebase(userId: String, oneSignalId: String) {
        val database = FirebaseDatabase.getInstance().reference

        database.child("users").child(userId).child("oneSignalId")
            .get()
            .addOnSuccessListener { snapshot ->
                val currentId = snapshot.getValue(String::class.java)
                if (currentId != oneSignalId) {
                    database.child("users").child(userId).child("oneSignalId")
                        .setValue(oneSignalId)
                        .addOnSuccessListener {
                            Log.d(TAG, "OneSignal ID ($oneSignalId) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId")
                        }
                        .addOnFailureListener { e ->
                            Log.e(TAG, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è OneSignal ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId", e)
                        }
                } else {
                    Log.d(TAG, "OneSignal ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω")
                }
            }
            .addOnFailureListener { e ->
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ OneSignal ID", e)
                // –†–µ–∑–µ—Ä–≤–Ω–∞—è –∑–∞–ø–∏—Å—å
                database.child("users").child(userId).child("oneSignalId")
                    .setValue(oneSignalId)
                    .addOnFailureListener { e2 ->
                        Log.e(TAG, "–†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OneSignal ID —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å", e2)
                    }
            }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫—É—é —Ü–∏—Ç–∞—Ç—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
     */
    fun sendPhilosophyQuoteNotification(context: Context) {
        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid ?: run {
            Log.e(TAG, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π —Ü–∏—Ç–∞—Ç—ã")
            return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        if (REST_API_KEY == "YOUR_REST_API_KEY_HERE") {
            Log.e(TAG, "REST_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return
        }

        FirebaseDatabase.getInstance().reference
            .child("users").child(currentUserId).child("oneSignalId")
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    val oneSignalId = snapshot.getValue(String::class.java)
                    if (!oneSignalId.isNullOrBlank()) {
                        sendQuoteNotification(oneSignalId, currentUserId)
                    } else {
                        Log.e(TAG, "OneSignal ID –ø—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $currentUserId")
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OneSignal ID: ${error.message}")
                }
            })
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ü–∏—Ç–∞—Ç–æ–π
     */
    private fun sendQuoteNotification(oneSignalId: String, userId: String) {
        try {
            val randomQuote = PhilosophyQuotes.getRandomQuote()
            val authHeader = "key $REST_API_KEY"

            val notification = NotificationRequest(
                app_id = ONESIGNAL_APP_ID,
                include_player_ids = listOf(oneSignalId),
                contents = mapOf("en" to randomQuote.text),
                headings = mapOf("en" to "üí≠ –ú—É–¥—Ä–∞—è –º—ã—Å–ª—å –æ—Ç ${randomQuote.author}"),
                android_channel_id = "292588fb-8a77-4b57-8566-b8bb9552ff68",
                small_icon = "ic_notification",
                data = mapOf(
                    "type" to "philosophy_quote",
                    "author" to randomQuote.author
                )
            )

            Log.d(TAG, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $userId")

            val call = RetrofitInstance.oneSignalApi.sendNotification(authHeader, notification)
            call.enqueue(object : Callback<ResponseBody> {
                override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {
                    if (response.isSuccessful) {
                        Log.d(TAG, "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è —Ü–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                    } else {
                        Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã: ${response.code()}")
                    }
                }

                override fun onFailure(call: Call<ResponseBody>, t: Throwable) {
                    Log.e(TAG, "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã: ${t.message}")
                }
            })

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ü–∏—Ç–∞—Ç–æ–π", e)
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
     */
    fun sendChatNotification(
        context: Context,
        userId: String,
        messageText: String,
        senderName: String,
        chatId: String
    ) {
        if (REST_API_KEY == "YOUR_REST_API_KEY_HERE") {
            Log.e(TAG, "REST_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return
        }

        FirebaseDatabase.getInstance().reference
            .child("users").child(userId).child("oneSignalId")
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    val oneSignalId = snapshot.getValue(String::class.java)
                    if (!oneSignalId.isNullOrBlank()) {
                        sendChatNotificationInternal(oneSignalId, userId, messageText, senderName, chatId)
                    } else {
                        Log.e(TAG, "OneSignal ID –ø—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId")
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OneSignal ID: ${error.message}")
                }
            })
    }

    private fun sendChatNotificationInternal(
        oneSignalId: String,
        userId: String,
        messageText: String,
        senderName: String,
        chatId: String
    ) {
        try {
            val authHeader = "key $REST_API_KEY"

            val notification = NotificationRequest(
                app_id = ONESIGNAL_APP_ID,
                include_player_ids = listOf(oneSignalId),
                contents = mapOf("en" to messageText),
                headings = mapOf("en" to "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç $senderName"),
                android_channel_id = "292588fb-8a77-4b57-8566-b8bb9552ff68",
                small_icon = "ic_notification",
                data = mapOf(
                    "type" to "chat_message",
                    "chatId" to chatId,
                    "senderName" to senderName
                )
            )

            Log.d(TAG, "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $userId")

            val call = RetrofitInstance.oneSignalApi.sendNotification(authHeader, notification)
            call.enqueue(object : Callback<ResponseBody> {
                override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {
                    if (response.isSuccessful) {
                        Log.d(TAG, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    } else {
                        Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${response.code()}")
                    }
                }

                override fun onFailure(call: Call<ResponseBody>, t: Throwable) {
                    Log.e(TAG, "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${t.message}")
                }
            })

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏", e)
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –≤ —à–∞—Ö–º–∞—Ç—ã
     */
    fun sendChessInvitationNotification(
        context: Context,
        userId: String,
        messageText: String,
        inviterName: String,
        gameId: String
    ) {
        if (REST_API_KEY == "YOUR_REST_API_KEY_HERE") {
            Log.e(TAG, "REST_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return
        }

        FirebaseDatabase.getInstance().reference
            .child("users").child(userId).child("oneSignalId")
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    val oneSignalId = snapshot.getValue(String::class.java)
                    if (!oneSignalId.isNullOrBlank()) {
                        sendChessNotificationInternal(oneSignalId, userId, messageText, inviterName, gameId)
                    } else {
                        Log.e(TAG, "OneSignal ID –ø—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId")
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OneSignal ID: ${error.message}")
                }
            })
    }

    private fun sendChessNotificationInternal(
        oneSignalId: String,
        userId: String,
        messageText: String,
        inviterName: String,
        gameId: String
    ) {
        try {
            val authHeader = "key $REST_API_KEY"

            val notification = NotificationRequest(
                app_id = ONESIGNAL_APP_ID,
                include_player_ids = listOf(oneSignalId),
                headings = mapOf("en" to "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —à–∞—Ö–º–∞—Ç—ã"),
                contents = mapOf("en" to messageText),
                android_channel_id = "292588fb-8a77-4b57-8566-b8bb9552ff68",
                small_icon = "ic_notification",
                data = mapOf(
                    "type" to "chess_invitation",
                    "gameId" to gameId,
                    "inviterName" to inviterName
                )
            )

            Log.d(TAG, "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $userId")

            val call = RetrofitInstance.oneSignalApi.sendNotification(authHeader, notification)
            call.enqueue(object : Callback<ResponseBody> {
                override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {
                    if (response.isSuccessful) {
                        Log.d(TAG, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    } else {
                        Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏: ${response.code()}")
                    }
                }

                override fun onFailure(call: Call<ResponseBody>, t: Throwable) {
                    Log.e(TAG, "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏: ${t.message}")
                }
            })

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏", e)
        }
    }
}