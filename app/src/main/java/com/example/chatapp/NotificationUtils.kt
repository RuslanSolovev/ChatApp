package com.example.chatapp.utils

import android.content.Context
import android.os.Handler
import android.util.Log
import com.example.chatapp.NotificationRequest
import com.example.chatapp.api.RetrofitInstance
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

object NotificationUtils {

    private const val TAG = "NotificationUtils"

    // ‚ö†Ô∏è –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô APP ID
    private const val ONESIGNAL_APP_ID = "0083de8f-7ca0-4824-ac88-9c037278237e"

    // ‚ö†Ô∏è –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô REST API KEY
    private const val REST_API_KEY = "os_v2_app_acb55d34ubecjleitqbxe6bdpzgl3ejyyjfu2em64r2vsnypzjosk4x4zz4ymvanhwxm6bwqiglyzyaslkrcurm2f5oxe5huvssdsdq"

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OneSignal
     */
    fun isOneSignalConfigured(): Boolean {
        val isConfigured = REST_API_KEY.isNotBlank() &&
                ONESIGNAL_APP_ID.isNotBlank() &&
                ONESIGNAL_APP_ID.matches(Regex("[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"))

        if (!isConfigured) {
            Log.e(TAG, "‚ùå OneSignal –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏!")
            Log.e(TAG, "   REST_API_KEY: ${if (REST_API_KEY.isNotBlank()) "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" else "‚ùå –ø—É—Å—Ç–æ–π"}")
            Log.e(TAG, "   ONESIGNAL_APP_ID: $ONESIGNAL_APP_ID")
            Log.e(TAG, "   –§–æ—Ä–º–∞—Ç App ID: ${if (ONESIGNAL_APP_ID.matches(Regex("[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"))) "‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π" else "‚ùå –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"}")
        } else {
            Log.d(TAG, "‚úÖ OneSignal –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            Log.d(TAG, "   App ID: ${ONESIGNAL_APP_ID.take(8)}...")
            Log.d(TAG, "   REST API Key: ${REST_API_KEY.take(8)}...")
        }

        return isConfigured
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç Player ID –≤ Firebase —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    fun saveCurrentUserOneSignalIdToDatabase(context: Context) {
        if (!isOneSignalConfigured()) {
            Log.e(TAG, "‚ùå OneSignal –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OneSignal ID.")
            return
        }

        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid
        if (currentUserId.isNullOrBlank()) {
            Log.w(TAG, "‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å OneSignal ID –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        }

        try {
            Log.d(TAG, "üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OneSignal ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${currentUserId.take(8)}...")

            // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            Handler().postDelayed({
                getOneSignalIdSafely(currentUserId)
            }, 1000)

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Unexpected error while scheduling OneSignal ID save", e)
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ OneSignal ID
     */
    private fun getOneSignalIdSafely(userId: String) {
        try {
            Log.d(TAG, "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ OneSignal ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId.take(8)}...")

            val oneSignalClass = Class.forName("com.onesignal.OneSignal")

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å DeviceState (–¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π OneSignal 4.x)
            try {
                val getDeviceStateMethod = oneSignalClass.getMethod("getDeviceState")
                val deviceState = getDeviceStateMethod.invoke(null)

                if (deviceState != null) {
                    val getUserIdMethod = deviceState.javaClass.getMethod("getUserId")
                    val oneSignalId = getUserIdMethod.invoke(deviceState) as? String

                    if (!oneSignalId.isNullOrEmpty()) {
                        Log.d(TAG, "‚úÖ OneSignal ID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ getDeviceState: ${oneSignalId.take(8)}...")
                        saveIdToFirebase(userId, oneSignalId)
                        return
                    }
                }
            } catch (e1: Exception) {
                Log.d(TAG, "‚ö†Ô∏è Method getDeviceState failed, trying legacy method: ${e1.message}")
            }

            // Legacy –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
            try {
                val getPermissionSubscriptionStateMethod = oneSignalClass.getMethod("getPermissionSubscriptionState")
                val permissionState = getPermissionSubscriptionStateMethod.invoke(null)

                if (permissionState != null) {
                    val getSubscriptionStatusMethod = permissionState.javaClass.getMethod("getSubscriptionStatus")
                    val subscriptionStatus = getSubscriptionStatusMethod.invoke(permissionState)

                    if (subscriptionStatus != null) {
                        val getUserIdMethod = subscriptionStatus.javaClass.getMethod("getUserId")
                        val oneSignalId = getUserIdMethod.invoke(subscriptionStatus) as? String

                        if (!oneSignalId.isNullOrEmpty()) {
                            Log.d(TAG, "‚úÖ OneSignal ID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ legacy method: ${oneSignalId.take(8)}...")
                            saveIdToFirebase(userId, oneSignalId)
                            return
                        }
                    }
                }
            } catch (e2: Exception) {
                Log.e(TAG, "‚ùå Both OneSignal ID methods failed: ${e2.message}")
            }

            Log.w(TAG, "‚ö†Ô∏è Could not retrieve OneSignal ID for user ${userId.take(8)}...")

        } catch (e: ClassNotFoundException) {
            Log.e(TAG, "‚ùå OneSignal SDK not found", e)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Unexpected error while getting OneSignal ID", e)
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π OneSignal ID –≤ Firebase —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
     */
    private fun saveIdToFirebase(userId: String, oneSignalId: String) {
        val database = FirebaseDatabase.getInstance().reference

        database.child("users").child(userId).child("oneSignalId")
            .get()
            .addOnSuccessListener { snapshot ->
                val currentId = snapshot.getValue(String::class.java)
                if (currentId != oneSignalId) {
                    database.child("users").child(userId).child("oneSignalId")
                        .setValue(oneSignalId)
                        .addOnSuccessListener {
                            Log.d(TAG, "‚úÖ OneSignal ID (${oneSignalId.take(8)}...) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId.take(8)}...")
                        }
                        .addOnFailureListener { e ->
                            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è OneSignal ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId.take(8)}...", e)
                        }
                } else {
                    Log.d(TAG, "‚ÑπÔ∏è OneSignal ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId.take(8)}... —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω")
                }
            }
            .addOnFailureListener { e ->
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ OneSignal ID", e)
                // –†–µ–∑–µ—Ä–≤–Ω–∞—è –∑–∞–ø–∏—Å—å
                database.child("users").child(userId).child("oneSignalId")
                    .setValue(oneSignalId)
                    .addOnSuccessListener {
                        Log.d(TAG, "‚úÖ OneSignal ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥")
                    }
                    .addOnFailureListener { e2 ->
                        Log.e(TAG, "‚ùå –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OneSignal ID —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å", e2)
                    }
            }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫—É—é —Ü–∏—Ç–∞—Ç—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
     */
    fun sendPhilosophyQuoteNotification(context: Context) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if (!isOneSignalConfigured()) {
            Log.e(TAG, "‚ùå OneSignal –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ü–∏—Ç–∞—Ç—ã.")
            return
        }

        val currentUserId = FirebaseAuth.getInstance().currentUser?.uid ?: run {
            Log.e(TAG, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π —Ü–∏—Ç–∞—Ç—ã")
            return
        }

        Log.d(TAG, "üìñ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${currentUserId.take(8)}...")

        FirebaseDatabase.getInstance().reference
            .child("users").child(currentUserId).child("oneSignalId")
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    val oneSignalId = snapshot.getValue(String::class.java)
                    if (!oneSignalId.isNullOrBlank()) {
                        sendQuoteNotification(oneSignalId, currentUserId)
                    } else {
                        Log.e(TAG, "‚ùå OneSignal ID –ø—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUserId.take(8)}...")
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OneSignal ID: ${error.message}")
                }
            })
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ü–∏—Ç–∞—Ç–æ–π
     */
    private fun sendQuoteNotification(oneSignalId: String, userId: String) {
        try {
            val randomQuote = PhilosophyQuotes.getRandomQuote()

            // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "Basic" –ø–µ—Ä–µ–¥ –∫–ª—é—á–æ–º
            val authHeader = "Basic $REST_API_KEY"

            val notification = NotificationRequest(
                app_id = ONESIGNAL_APP_ID,
                include_player_ids = listOf(oneSignalId),
                contents = mapOf("en" to randomQuote.text),
                headings = mapOf("en" to "üí≠ –ú—É–¥—Ä–∞—è –º—ã—Å–ª—å –æ—Ç ${randomQuote.author}"),
                android_channel_id = "292588fb-8a77-4b57-8566-b8bb9552ff68",
                small_icon = "ic_notification",
                data = mapOf(
                    "type" to "philosophy_quote",
                    "author" to randomQuote.author
                )
            )

            Log.d(TAG, "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId.take(8)}...")
            Log.d(TAG, "   Player ID: ${oneSignalId.take(8)}...")
            Log.d(TAG, "   App ID: ${ONESIGNAL_APP_ID.take(8)}...")

            val call = RetrofitInstance.oneSignalApi.sendNotification(authHeader, notification)
            call.enqueue(object : Callback<ResponseBody> {
                override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {
                    if (response.isSuccessful) {
                        Log.d(TAG, "‚úÖ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è —Ü–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ OneSignal")
                        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        try {
                            val responseBody = response.body()?.string()
                            Log.d(TAG, "üì® –û—Ç–≤–µ—Ç OneSignal: $responseBody")
                        } catch (e: Exception) {
                            Log.d(TAG, "üì® –û—Ç–≤–µ—Ç OneSignal –ø–æ–ª—É—á–µ–Ω (–±–µ–∑ —Ç–µ–ª–∞)")
                        }
                    } else {
                        val errorBody = response.errorBody()?.string() ?: "Unknown error"
                        Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã: ${response.code()} - $errorBody")

                        // –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
                        when (response.code()) {
                            400 -> Log.e(TAG, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                            403 -> Log.e(TAG, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π REST API Key")
                            404 -> Log.e(TAG, "‚ùå App ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            500 -> Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ OneSignal")
                            else -> Log.e(TAG, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ HTTP: ${response.code()}")
                        }
                    }
                }

                override fun onFailure(call: Call<ResponseBody>, t: Throwable) {
                    Log.e(TAG, "üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã: ${t.message}")
                }
            })

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ü–∏—Ç–∞—Ç–æ–π", e)
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
     */
    fun sendChatNotification(
        context: Context,
        userId: String,
        messageText: String,
        senderName: String,
        chatId: String
    ) {
        if (!isOneSignalConfigured()) {
            Log.e(TAG, "‚ùå OneSignal –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return
        }

        Log.d(TAG, "üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${userId.take(8)}...")

        FirebaseDatabase.getInstance().reference
            .child("users").child(userId).child("oneSignalId")
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    val oneSignalId = snapshot.getValue(String::class.java)
                    if (!oneSignalId.isNullOrBlank()) {
                        Log.d(TAG, "‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId.take(8)}... –µ—Å—Ç—å OneSignal ID: ${oneSignalId.take(8)}...")
                        sendChatNotificationInternal(oneSignalId, userId, messageText, senderName, chatId)
                    } else {
                        Log.e(TAG, "‚ùå OneSignal ID –ø—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId.take(8)}...")
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OneSignal ID: ${error.message}")
                }
            })
    }

    private fun sendChatNotificationInternal(
        oneSignalId: String,
        userId: String,
        messageText: String,
        senderName: String,
        chatId: String
    ) {
        try {
            val authHeader = "Basic $REST_API_KEY"

            val notification = NotificationRequest(
                app_id = ONESIGNAL_APP_ID,
                include_player_ids = listOf(oneSignalId),
                contents = mapOf("en" to messageText),
                headings = mapOf("en" to "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç $senderName"),
                android_channel_id = "292588fb-8a77-4b57-8566-b8bb9552ff68",
                small_icon = "ic_notification",
                data = mapOf(
                    "type" to "chat_message",
                    "chatId" to chatId,
                    "senderName" to senderName
                )
            )

            Log.d(TAG, "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId.take(8)}...")
            Log.d(TAG, "   Player ID: ${oneSignalId.take(8)}...")
            Log.d(TAG, "   App ID: ${ONESIGNAL_APP_ID.take(8)}...")
            Log.d(TAG, "   –°–æ–æ–±—â–µ–Ω–∏–µ: $messageText")
            Log.d(TAG, "   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: $senderName")
            Log.d(TAG, "   Chat ID: $chatId")

            val call = RetrofitInstance.oneSignalApi.sendNotification(authHeader, notification)
            call.enqueue(object : Callback<ResponseBody> {
                override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {
                    if (response.isSuccessful) {
                        Log.d(TAG, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ OneSignal")
                        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        try {
                            val responseBody = response.body()?.string()
                            Log.d(TAG, "üì® –û—Ç–≤–µ—Ç OneSignal: $responseBody")
                        } catch (e: Exception) {
                            Log.d(TAG, "üì® –û—Ç–≤–µ—Ç OneSignal –ø–æ–ª—É—á–µ–Ω (–±–µ–∑ —Ç–µ–ª–∞)")
                        }
                    } else {
                        val errorBody = response.errorBody()?.string() ?: "Unknown error"
                        Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${response.code()} - $errorBody")

                        // –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
                        when (response.code()) {
                            400 -> {
                                Log.e(TAG, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                                Log.e(TAG, "   - App ID: $ONESIGNAL_APP_ID")
                                Log.e(TAG, "   - REST API Key: ${REST_API_KEY.take(8)}...")
                                Log.e(TAG, "   - Player ID: ${oneSignalId.take(8)}...")
                            }
                            403 -> Log.e(TAG, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π REST API Key")
                            404 -> Log.e(TAG, "‚ùå App ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            500 -> Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ OneSignal")
                            else -> Log.e(TAG, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ HTTP: ${response.code()}")
                        }
                    }
                }

                override fun onFailure(call: Call<ResponseBody>, t: Throwable) {
                    Log.e(TAG, "üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${t.message}")
                }
            })

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏", e)
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –≤ —à–∞—Ö–º–∞—Ç—ã
     */
    fun sendChessInvitationNotification(
        context: Context,
        userId: String,
        messageText: String,
        inviterName: String,
        gameId: String
    ) {
        if (!isOneSignalConfigured()) {
            Log.e(TAG, "‚ùå OneSignal –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return
        }

        Log.d(TAG, "‚ôüÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${userId.take(8)}...")

        FirebaseDatabase.getInstance().reference
            .child("users").child(userId).child("oneSignalId")
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    val oneSignalId = snapshot.getValue(String::class.java)
                    if (!oneSignalId.isNullOrBlank()) {
                        sendChessNotificationInternal(oneSignalId, userId, messageText, inviterName, gameId)
                    } else {
                        Log.e(TAG, "‚ùå OneSignal ID –ø—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId.take(8)}...")
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OneSignal ID: ${error.message}")
                }
            })
    }

    private fun sendChessNotificationInternal(
        oneSignalId: String,
        userId: String,
        messageText: String,
        inviterName: String,
        gameId: String
    ) {
        try {
            val authHeader = "Basic $REST_API_KEY"

            val notification = NotificationRequest(
                app_id = ONESIGNAL_APP_ID,
                include_player_ids = listOf(oneSignalId),
                headings = mapOf("en" to "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —à–∞—Ö–º–∞—Ç—ã"),
                contents = mapOf("en" to messageText),
                android_channel_id = "292588fb-8a77-4b57-8566-b8bb9552ff68",
                small_icon = "ic_notification",
                data = mapOf(
                    "type" to "chess_invitation",
                    "gameId" to gameId,
                    "inviterName" to inviterName
                )
            )

            Log.d(TAG, "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId.take(8)}...")
            Log.d(TAG, "   Player ID: ${oneSignalId.take(8)}...")
            Log.d(TAG, "   App ID: ${ONESIGNAL_APP_ID.take(8)}...")

            val call = RetrofitInstance.oneSignalApi.sendNotification(authHeader, notification)
            call.enqueue(object : Callback<ResponseBody> {
                override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {
                    if (response.isSuccessful) {
                        Log.d(TAG, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    } else {
                        val errorBody = response.errorBody()?.string() ?: "Unknown error"
                        Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏: ${response.code()} - $errorBody")
                    }
                }

                override fun onFailure(call: Call<ResponseBody>, t: Throwable) {
                    Log.e(TAG, "üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏: ${t.message}")
                }
            })

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏", e)
        }
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    fun sendTestNotification(context: Context, targetUserId: String) {
        Log.d(TAG, "üß™ –û–¢–ü–†–ê–í–ö–ê –¢–ï–°–¢–û–í–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø")

        if (!isOneSignalConfigured()) {
            Log.e(TAG, "üß™ OneSignal –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞")
            return
        }

        FirebaseDatabase.getInstance().reference
            .child("users").child(targetUserId).child("oneSignalId")
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    val oneSignalId = snapshot.getValue(String::class.java)
                    if (!oneSignalId.isNullOrBlank()) {
                        Log.d(TAG, "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è Player ID: ${oneSignalId.take(8)}...")

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        sendChatNotificationInternal(
                            oneSignalId,
                            targetUserId,
                            "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                            "Test User",
                            "test_chat"
                        )
                    } else {
                        Log.e(TAG, "üß™ ‚ùå –ù–µ—Ç OneSignal ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    Log.e(TAG, "üß™ ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OneSignal ID –¥–ª—è —Ç–µ—Å—Ç–∞", error.toException())
                }
            })
    }
}